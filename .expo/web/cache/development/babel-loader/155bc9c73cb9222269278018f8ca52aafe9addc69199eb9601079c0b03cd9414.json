{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { getExerciseById } from \"./exerciseService\";\nimport { defaultTemplates } from \"../data/defaultTemplates\";\nconst TEMPLATES_STORAGE_KEY = \"workout_templates\";\nconst TEMPLATES_INITIALIZED_KEY = \"templates_initialized\";\nexport const initializeTemplates = async () => {\n  try {\n    const initialized = await AsyncStorage.getItem(TEMPLATES_INITIALIZED_KEY);\n    if (!initialized) {\n      await AsyncStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(defaultTemplates));\n      await AsyncStorage.setItem(TEMPLATES_INITIALIZED_KEY, \"true\");\n    }\n  } catch (error) {\n    console.error(\"Error initializing templates:\", error);\n  }\n};\nexport const getAllTemplates = async () => {\n  try {\n    await initializeTemplates();\n    const templatesJson = await AsyncStorage.getItem(TEMPLATES_STORAGE_KEY);\n    return templatesJson ? JSON.parse(templatesJson) : [];\n  } catch (error) {\n    console.error(\"Error retrieving templates:\", error);\n    return [];\n  }\n};\nexport const getTemplateById = async id => {\n  const templates = await getAllTemplates();\n  return templates.find(template => template.id === id) || null;\n};\nexport const saveTemplate = async template => {\n  try {\n    const templates = await getAllTemplates();\n    if (!template.id) {\n      template.id = uuidv4();\n      template.createdAt = new Date();\n    }\n    template.updatedAt = new Date();\n    const existingIndex = templates.findIndex(t => t.id === template.id);\n    if (existingIndex >= 0) {\n      templates[existingIndex] = template;\n    } else {\n      templates.push(template);\n    }\n    await AsyncStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(templates));\n    return template;\n  } catch (error) {\n    console.error(\"Error saving template:\", error);\n    throw error;\n  }\n};\nexport const deleteTemplate = async id => {\n  try {\n    const templates = await getAllTemplates();\n    const template = templates.find(t => t.id === id);\n    if (template && template.isDefault) {\n      return false;\n    }\n    const filteredTemplates = templates.filter(template => template.id !== id);\n    await AsyncStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(filteredTemplates));\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting template:\", error);\n    return false;\n  }\n};\nexport const createWorkoutFromTemplate = async templateId => {\n  try {\n    const template = await getTemplateById(templateId);\n    if (!template) {\n      throw new Error(\"Template not found\");\n    }\n    const exerciseEntries = [];\n    for (const templateExercise of template.exercises) {\n      const exercise = await getExerciseById(templateExercise.exerciseId);\n      if (!exercise) {\n        continue;\n      }\n      const sets = [];\n      for (let i = 0; i < templateExercise.setCount; i++) {\n        let targetReps;\n        if (Array.isArray(templateExercise.targetReps)) {\n          targetReps = Math.round((templateExercise.targetReps[0] + templateExercise.targetReps[1]) / 2);\n        } else {\n          targetReps = templateExercise.targetReps;\n        }\n        sets.push({\n          id: uuidv4(),\n          reps: targetReps,\n          weight: 0,\n          isCompleted: false\n        });\n      }\n      exerciseEntries.push({\n        id: uuidv4(),\n        exerciseId: exercise.id,\n        exercise,\n        sets,\n        notes: templateExercise.notes\n      });\n    }\n    const workout = {\n      id: uuidv4(),\n      name: template.name,\n      date: new Date(),\n      exercises: exerciseEntries,\n      notes: `Created from template: ${template.name}`,\n      isCompleted: false\n    };\n    return workout;\n  } catch (error) {\n    console.error(\"Error creating workout from template:\", error);\n    throw error;\n  }\n};\nexport const getTemplatesByMuscleGroup = async muscleGroup => {\n  const templates = await getAllTemplates();\n  return templates.filter(template => template.targetMuscleGroups.includes(muscleGroup));\n};\nexport const getTemplatesByDifficulty = async difficulty => {\n  const templates = await getAllTemplates();\n  return templates.filter(template => template.difficulty === difficulty);\n};\nexport const searchTemplates = async searchTerm => {\n  const templates = await getAllTemplates();\n  const term = searchTerm.toLowerCase();\n  return templates.filter(template => template.name.toLowerCase().includes(term) || template.description && template.description.toLowerCase().includes(term));\n};","map":{"version":3,"names":["AsyncStorage","v4","uuidv4","getExerciseById","defaultTemplates","TEMPLATES_STORAGE_KEY","TEMPLATES_INITIALIZED_KEY","initializeTemplates","initialized","getItem","setItem","JSON","stringify","error","console","getAllTemplates","templatesJson","parse","getTemplateById","id","templates","find","template","saveTemplate","createdAt","Date","updatedAt","existingIndex","findIndex","t","push","deleteTemplate","isDefault","filteredTemplates","filter","createWorkoutFromTemplate","templateId","Error","exerciseEntries","templateExercise","exercises","exercise","exerciseId","sets","i","setCount","targetReps","Array","isArray","Math","round","reps","weight","isCompleted","notes","workout","name","date","getTemplatesByMuscleGroup","muscleGroup","targetMuscleGroups","includes","getTemplatesByDifficulty","difficulty","searchTemplates","searchTerm","term","toLowerCase","description"],"sources":["/Users/recep/Gym/services/templateService.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport type { WorkoutTemplate } from \"../models/Template\"\nimport type { Workout, ExerciseEntry, WorkoutSet } from \"../models/Workout\"\nimport { getExerciseById } from \"./exerciseService\"\nimport { defaultTemplates } from \"../data/defaultTemplates\"\n\n// Keys for AsyncStorage\nconst TEMPLATES_STORAGE_KEY = \"workout_templates\"\nconst TEMPLATES_INITIALIZED_KEY = \"templates_initialized\"\n\n// Initialize default templates if not already done\nexport const initializeTemplates = async (): Promise<void> => {\n  try {\n    const initialized = await AsyncStorage.getItem(TEMPLATES_INITIALIZED_KEY)\n\n    if (!initialized) {\n      await AsyncStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(defaultTemplates))\n      await AsyncStorage.setItem(TEMPLATES_INITIALIZED_KEY, \"true\")\n    }\n  } catch (error) {\n    console.error(\"Error initializing templates:\", error)\n  }\n}\n\n// Get all templates\nexport const getAllTemplates = async (): Promise<WorkoutTemplate[]> => {\n  try {\n    // Ensure templates are initialized\n    await initializeTemplates()\n\n    const templatesJson = await AsyncStorage.getItem(TEMPLATES_STORAGE_KEY)\n    return templatesJson ? JSON.parse(templatesJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving templates:\", error)\n    return []\n  }\n}\n\n// Get template by ID\nexport const getTemplateById = async (id: string): Promise<WorkoutTemplate | null> => {\n  const templates = await getAllTemplates()\n  return templates.find((template) => template.id === id) || null\n}\n\n// Save a template (create or update)\nexport const saveTemplate = async (template: WorkoutTemplate): Promise<WorkoutTemplate> => {\n  try {\n    const templates = await getAllTemplates()\n\n    // If template has no ID, create a new one\n    if (!template.id) {\n      template.id = uuidv4()\n      template.createdAt = new Date()\n    }\n\n    template.updatedAt = new Date()\n\n    // Find if template already exists to update or add new\n    const existingIndex = templates.findIndex((t) => t.id === template.id)\n\n    if (existingIndex >= 0) {\n      templates[existingIndex] = template\n    } else {\n      templates.push(template)\n    }\n\n    await AsyncStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(templates))\n    return template\n  } catch (error) {\n    console.error(\"Error saving template:\", error)\n    throw error\n  }\n}\n\n// Delete a template\nexport const deleteTemplate = async (id: string): Promise<boolean> => {\n  try {\n    const templates = await getAllTemplates()\n\n    // Don't allow deletion of default templates\n    const template = templates.find((t) => t.id === id)\n    if (template && template.isDefault) {\n      return false\n    }\n\n    const filteredTemplates = templates.filter((template) => template.id !== id)\n    await AsyncStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(filteredTemplates))\n    return true\n  } catch (error) {\n    console.error(\"Error deleting template:\", error)\n    return false\n  }\n}\n\n// Create a workout from a template\nexport const createWorkoutFromTemplate = async (templateId: string): Promise<Workout> => {\n  try {\n    const template = await getTemplateById(templateId)\n    if (!template) {\n      throw new Error(\"Template not found\")\n    }\n\n    const exerciseEntries: ExerciseEntry[] = []\n\n    // Process each exercise in the template\n    for (const templateExercise of template.exercises) {\n      const exercise = await getExerciseById(templateExercise.exerciseId)\n      if (!exercise) {\n        continue // Skip if exercise not found\n      }\n\n      // Create sets based on template\n      const sets: WorkoutSet[] = []\n      for (let i = 0; i < templateExercise.setCount; i++) {\n        let targetReps: number\n        if (Array.isArray(templateExercise.targetReps)) {\n          // If it's a range, use the middle value\n          targetReps = Math.round((templateExercise.targetReps[0] + templateExercise.targetReps[1]) / 2)\n        } else {\n          targetReps = templateExercise.targetReps\n        }\n\n        sets.push({\n          id: uuidv4(),\n          reps: targetReps,\n          weight: 0, // User will fill this in\n          isCompleted: false,\n        })\n      }\n\n      // Create exercise entry\n      exerciseEntries.push({\n        id: uuidv4(),\n        exerciseId: exercise.id,\n        exercise,\n        sets,\n        notes: templateExercise.notes,\n      })\n    }\n\n    // Create the workout\n    const workout: Workout = {\n      id: uuidv4(),\n      name: template.name,\n      date: new Date(),\n      exercises: exerciseEntries,\n      notes: `Created from template: ${template.name}`,\n      isCompleted: false,\n    }\n\n    return workout\n  } catch (error) {\n    console.error(\"Error creating workout from template:\", error)\n    throw error\n  }\n}\n\n// Get templates by muscle group\nexport const getTemplatesByMuscleGroup = async (muscleGroup: string): Promise<WorkoutTemplate[]> => {\n  const templates = await getAllTemplates()\n  return templates.filter((template) => template.targetMuscleGroups.includes(muscleGroup as any))\n}\n\n// Get templates by difficulty\nexport const getTemplatesByDifficulty = async (difficulty: string): Promise<WorkoutTemplate[]> => {\n  const templates = await getAllTemplates()\n  return templates.filter((template) => template.difficulty === difficulty)\n}\n\n// Search templates by name or description\nexport const searchTemplates = async (searchTerm: string): Promise<WorkoutTemplate[]> => {\n  const templates = await getAllTemplates()\n  const term = searchTerm.toLowerCase()\n  return templates.filter(\n    (template) =>\n      template.name.toLowerCase().includes(term) ||\n      (template.description && template.description.toLowerCase().includes(term)),\n  )\n}\n\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,2CAA2C;AACpE,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAGnC,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,gBAAgB,QAAQ,0BAA0B;AAG3D,MAAMC,qBAAqB,GAAG,mBAAmB;AACjD,MAAMC,yBAAyB,GAAG,uBAAuB;AAGzD,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAA2B;EAC5D,IAAI;IACF,MAAMC,WAAW,GAAG,MAAMR,YAAY,CAACS,OAAO,CAACH,yBAAyB,CAAC;IAEzE,IAAI,CAACE,WAAW,EAAE;MAChB,MAAMR,YAAY,CAACU,OAAO,CAACL,qBAAqB,EAAEM,IAAI,CAACC,SAAS,CAACR,gBAAgB,CAAC,CAAC;MACnF,MAAMJ,YAAY,CAACU,OAAO,CAACJ,yBAAyB,EAAE,MAAM,CAAC;IAC/D;EACF,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACvD;AACF,CAAC;AAGD,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAwC;EACrE,IAAI;IAEF,MAAMR,mBAAmB,CAAC,CAAC;IAE3B,MAAMS,aAAa,GAAG,MAAMhB,YAAY,CAACS,OAAO,CAACJ,qBAAqB,CAAC;IACvE,OAAOW,aAAa,GAAGL,IAAI,CAACM,KAAK,CAACD,aAAa,CAAC,GAAG,EAAE;EACvD,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC;AAGD,OAAO,MAAMK,eAAe,GAAG,MAAOC,EAAU,IAAsC;EACpF,MAAMC,SAAS,GAAG,MAAML,eAAe,CAAC,CAAC;EACzC,OAAOK,SAAS,CAACC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACH,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;AACjE,CAAC;AAGD,OAAO,MAAMI,YAAY,GAAG,MAAOD,QAAyB,IAA+B;EACzF,IAAI;IACF,MAAMF,SAAS,GAAG,MAAML,eAAe,CAAC,CAAC;IAGzC,IAAI,CAACO,QAAQ,CAACH,EAAE,EAAE;MAChBG,QAAQ,CAACH,EAAE,GAAGjB,MAAM,CAAC,CAAC;MACtBoB,QAAQ,CAACE,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IACjC;IAEAH,QAAQ,CAACI,SAAS,GAAG,IAAID,IAAI,CAAC,CAAC;IAG/B,MAAME,aAAa,GAAGP,SAAS,CAACQ,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACV,EAAE,KAAKG,QAAQ,CAACH,EAAE,CAAC;IAEtE,IAAIQ,aAAa,IAAI,CAAC,EAAE;MACtBP,SAAS,CAACO,aAAa,CAAC,GAAGL,QAAQ;IACrC,CAAC,MAAM;MACLF,SAAS,CAACU,IAAI,CAACR,QAAQ,CAAC;IAC1B;IAEA,MAAMtB,YAAY,CAACU,OAAO,CAACL,qBAAqB,EAAEM,IAAI,CAACC,SAAS,CAACQ,SAAS,CAAC,CAAC;IAC5E,OAAOE,QAAQ;EACjB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAGD,OAAO,MAAMkB,cAAc,GAAG,MAAOZ,EAAU,IAAuB;EACpE,IAAI;IACF,MAAMC,SAAS,GAAG,MAAML,eAAe,CAAC,CAAC;IAGzC,MAAMO,QAAQ,GAAGF,SAAS,CAACC,IAAI,CAAEQ,CAAC,IAAKA,CAAC,CAACV,EAAE,KAAKA,EAAE,CAAC;IACnD,IAAIG,QAAQ,IAAIA,QAAQ,CAACU,SAAS,EAAE;MAClC,OAAO,KAAK;IACd;IAEA,MAAMC,iBAAiB,GAAGb,SAAS,CAACc,MAAM,CAAEZ,QAAQ,IAAKA,QAAQ,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC5E,MAAMnB,YAAY,CAACU,OAAO,CAACL,qBAAqB,EAAEM,IAAI,CAACC,SAAS,CAACqB,iBAAiB,CAAC,CAAC;IACpF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,KAAK;EACd;AACF,CAAC;AAGD,OAAO,MAAMsB,yBAAyB,GAAG,MAAOC,UAAkB,IAAuB;EACvF,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMJ,eAAe,CAACkB,UAAU,CAAC;IAClD,IAAI,CAACd,QAAQ,EAAE;MACb,MAAM,IAAIe,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,MAAMC,eAAgC,GAAG,EAAE;IAG3C,KAAK,MAAMC,gBAAgB,IAAIjB,QAAQ,CAACkB,SAAS,EAAE;MACjD,MAAMC,QAAQ,GAAG,MAAMtC,eAAe,CAACoC,gBAAgB,CAACG,UAAU,CAAC;MACnE,IAAI,CAACD,QAAQ,EAAE;QACb;MACF;MAGA,MAAME,IAAkB,GAAG,EAAE;MAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,gBAAgB,CAACM,QAAQ,EAAED,CAAC,EAAE,EAAE;QAClD,IAAIE,UAAkB;QACtB,IAAIC,KAAK,CAACC,OAAO,CAACT,gBAAgB,CAACO,UAAU,CAAC,EAAE;UAE9CA,UAAU,GAAGG,IAAI,CAACC,KAAK,CAAC,CAACX,gBAAgB,CAACO,UAAU,CAAC,CAAC,CAAC,GAAGP,gBAAgB,CAACO,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAChG,CAAC,MAAM;UACLA,UAAU,GAAGP,gBAAgB,CAACO,UAAU;QAC1C;QAEAH,IAAI,CAACb,IAAI,CAAC;UACRX,EAAE,EAAEjB,MAAM,CAAC,CAAC;UACZiD,IAAI,EAAEL,UAAU;UAChBM,MAAM,EAAE,CAAC;UACTC,WAAW,EAAE;QACf,CAAC,CAAC;MACJ;MAGAf,eAAe,CAACR,IAAI,CAAC;QACnBX,EAAE,EAAEjB,MAAM,CAAC,CAAC;QACZwC,UAAU,EAAED,QAAQ,CAACtB,EAAE;QACvBsB,QAAQ;QACRE,IAAI;QACJW,KAAK,EAAEf,gBAAgB,CAACe;MAC1B,CAAC,CAAC;IACJ;IAGA,MAAMC,OAAgB,GAAG;MACvBpC,EAAE,EAAEjB,MAAM,CAAC,CAAC;MACZsD,IAAI,EAAElC,QAAQ,CAACkC,IAAI;MACnBC,IAAI,EAAE,IAAIhC,IAAI,CAAC,CAAC;MAChBe,SAAS,EAAEF,eAAe;MAC1BgB,KAAK,EAAE,0BAA0BhC,QAAQ,CAACkC,IAAI,EAAE;MAChDH,WAAW,EAAE;IACf,CAAC;IAED,OAAOE,OAAO;EAChB,CAAC,CAAC,OAAO1C,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACb;AACF,CAAC;AAGD,OAAO,MAAM6C,yBAAyB,GAAG,MAAOC,WAAmB,IAAiC;EAClG,MAAMvC,SAAS,GAAG,MAAML,eAAe,CAAC,CAAC;EACzC,OAAOK,SAAS,CAACc,MAAM,CAAEZ,QAAQ,IAAKA,QAAQ,CAACsC,kBAAkB,CAACC,QAAQ,CAACF,WAAkB,CAAC,CAAC;AACjG,CAAC;AAGD,OAAO,MAAMG,wBAAwB,GAAG,MAAOC,UAAkB,IAAiC;EAChG,MAAM3C,SAAS,GAAG,MAAML,eAAe,CAAC,CAAC;EACzC,OAAOK,SAAS,CAACc,MAAM,CAAEZ,QAAQ,IAAKA,QAAQ,CAACyC,UAAU,KAAKA,UAAU,CAAC;AAC3E,CAAC;AAGD,OAAO,MAAMC,eAAe,GAAG,MAAOC,UAAkB,IAAiC;EACvF,MAAM7C,SAAS,GAAG,MAAML,eAAe,CAAC,CAAC;EACzC,MAAMmD,IAAI,GAAGD,UAAU,CAACE,WAAW,CAAC,CAAC;EACrC,OAAO/C,SAAS,CAACc,MAAM,CACpBZ,QAAQ,IACPA,QAAQ,CAACkC,IAAI,CAACW,WAAW,CAAC,CAAC,CAACN,QAAQ,CAACK,IAAI,CAAC,IACzC5C,QAAQ,CAAC8C,WAAW,IAAI9C,QAAQ,CAAC8C,WAAW,CAACD,WAAW,CAAC,CAAC,CAACN,QAAQ,CAACK,IAAI,CAC7E,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}