{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nconst API_BASE_URL = \"https://api.stoicstrength.com\";\nconst AUTH_TOKEN_KEY = \"auth_token\";\nconst LAST_SYNC_KEY = \"last_sync\";\nexport const getAuthToken = async () => {\n  try {\n    return await AsyncStorage.getItem(AUTH_TOKEN_KEY);\n  } catch (error) {\n    console.error(\"Error getting auth token:\", error);\n    return null;\n  }\n};\nexport const setAuthToken = async token => {\n  try {\n    await AsyncStorage.setItem(AUTH_TOKEN_KEY, token);\n  } catch (error) {\n    console.error(\"Error setting auth token:\", error);\n  }\n};\nexport const clearAuthToken = async () => {\n  try {\n    await AsyncStorage.removeItem(AUTH_TOKEN_KEY);\n  } catch (error) {\n    console.error(\"Error clearing auth token:\", error);\n  }\n};\nexport const isLoggedIn = async () => {\n  const token = await getAuthToken();\n  return token !== null;\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      await setAuthToken(data.token);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error(\"Error logging in:\", error);\n    return false;\n  }\n};\nexport const register = async (email, password, name) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password,\n        name\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      await setAuthToken(data.token);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error(\"Error registering:\", error);\n    return false;\n  }\n};\nexport const logout = async () => {\n  await clearAuthToken();\n};\nexport const uploadData = async () => {\n  try {\n    const token = await getAuthToken();\n    if (!token) {\n      return false;\n    }\n    const workoutsJson = await AsyncStorage.getItem(\"workouts\");\n    const journalEntriesJson = await AsyncStorage.getItem(\"journal_entries\");\n    const workouts = workoutsJson ? JSON.parse(workoutsJson) : [];\n    const journalEntries = journalEntriesJson ? JSON.parse(journalEntriesJson) : [];\n    const response = await fetch(`${API_BASE_URL}/sync/upload`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        workouts,\n        journalEntries,\n        timestamp: new Date().toISOString()\n      })\n    });\n    if (response.ok) {\n      await AsyncStorage.setItem(LAST_SYNC_KEY, new Date().toISOString());\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error(\"Error uploading data:\", error);\n    return false;\n  }\n};\nexport const downloadData = async () => {\n  try {\n    const token = await getAuthToken();\n    if (!token) {\n      return false;\n    }\n    const lastSync = (await AsyncStorage.getItem(LAST_SYNC_KEY)) || \"1970-01-01T00:00:00.000Z\";\n    const response = await fetch(`${API_BASE_URL}/sync/download?since=${lastSync}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      if (data.workouts && data.workouts.length > 0) {\n        const workoutsJson = await AsyncStorage.getItem(\"workouts\");\n        const localWorkouts = workoutsJson ? JSON.parse(workoutsJson) : [];\n        const mergedWorkouts = [...localWorkouts];\n        data.workouts.forEach(remoteWorkout => {\n          const index = mergedWorkouts.findIndex(w => w.id === remoteWorkout.id);\n          if (index >= 0) {\n            mergedWorkouts[index] = remoteWorkout;\n          } else {\n            mergedWorkouts.push(remoteWorkout);\n          }\n        });\n        await AsyncStorage.setItem(\"workouts\", JSON.stringify(mergedWorkouts));\n      }\n      if (data.journalEntries && data.journalEntries.length > 0) {\n        const entriesJson = await AsyncStorage.getItem(\"journal_entries\");\n        const localEntries = entriesJson ? JSON.parse(entriesJson) : [];\n        const mergedEntries = [...localEntries];\n        data.journalEntries.forEach(remoteEntry => {\n          const index = mergedEntries.findIndex(e => e.id === remoteEntry.id);\n          if (index >= 0) {\n            mergedEntries[index] = remoteEntry;\n          } else {\n            mergedEntries.push(remoteEntry);\n          }\n        });\n        await AsyncStorage.setItem(\"journal_entries\", JSON.stringify(mergedEntries));\n      }\n      await AsyncStorage.setItem(LAST_SYNC_KEY, new Date().toISOString());\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error(\"Error downloading data:\", error);\n    return false;\n  }\n};\nexport const syncData = async () => {\n  const uploadSuccess = await uploadData();\n  if (!uploadSuccess) {\n    return false;\n  }\n  const downloadSuccess = await downloadData();\n  return downloadSuccess;\n};","map":{"version":3,"names":["AsyncStorage","API_BASE_URL","AUTH_TOKEN_KEY","LAST_SYNC_KEY","getAuthToken","getItem","error","console","setAuthToken","token","setItem","clearAuthToken","removeItem","isLoggedIn","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","data","json","register","name","logout","uploadData","workoutsJson","journalEntriesJson","workouts","parse","journalEntries","Authorization","timestamp","Date","toISOString","downloadData","lastSync","length","localWorkouts","mergedWorkouts","forEach","remoteWorkout","index","findIndex","w","id","push","entriesJson","localEntries","mergedEntries","remoteEntry","e","syncData","uploadSuccess","downloadSuccess"],"sources":["/Users/recep/Gym/services/cloudSyncService.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport type { Workout } from \"../models/Workout\"\nimport type { JournalEntry } from \"../models/JournalEntry\"\n\n// This would be replaced with your actual API endpoints\nconst API_BASE_URL = \"https://api.stoicstrength.com\"\n\n// Keys for AsyncStorage\nconst AUTH_TOKEN_KEY = \"auth_token\"\nconst LAST_SYNC_KEY = \"last_sync\"\n\n// Get the authentication token\nexport const getAuthToken = async (): Promise<string | null> => {\n  try {\n    return await AsyncStorage.getItem(AUTH_TOKEN_KEY)\n  } catch (error) {\n    console.error(\"Error getting auth token:\", error)\n    return null\n  }\n}\n\n// Set the authentication token\nexport const setAuthToken = async (token: string): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(AUTH_TOKEN_KEY, token)\n  } catch (error) {\n    console.error(\"Error setting auth token:\", error)\n  }\n}\n\n// Clear the authentication token (logout)\nexport const clearAuthToken = async (): Promise<void> => {\n  try {\n    await AsyncStorage.removeItem(AUTH_TOKEN_KEY)\n  } catch (error) {\n    console.error(\"Error clearing auth token:\", error)\n  }\n}\n\n// Check if user is logged in\nexport const isLoggedIn = async (): Promise<boolean> => {\n  const token = await getAuthToken()\n  return token !== null\n}\n\n// Login user\nexport const login = async (email: string, password: string): Promise<boolean> => {\n  try {\n    // This would be a real API call in a production app\n    // For now, we'll simulate a successful login\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    })\n\n    if (response.ok) {\n      const data = await response.json()\n      await setAuthToken(data.token)\n      return true\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error logging in:\", error)\n    return false\n  }\n}\n\n// Register user\nexport const register = async (email: string, password: string, name: string): Promise<boolean> => {\n  try {\n    // This would be a real API call in a production app\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password, name }),\n    })\n\n    if (response.ok) {\n      const data = await response.json()\n      await setAuthToken(data.token)\n      return true\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error registering:\", error)\n    return false\n  }\n}\n\n// Logout user\nexport const logout = async (): Promise<void> => {\n  await clearAuthToken()\n}\n\n// Upload data to cloud\nexport const uploadData = async (): Promise<boolean> => {\n  try {\n    const token = await getAuthToken()\n    if (!token) {\n      return false\n    }\n\n    // Get all local data\n    const workoutsJson = await AsyncStorage.getItem(\"workouts\")\n    const journalEntriesJson = await AsyncStorage.getItem(\"journal_entries\")\n\n    const workouts = workoutsJson ? JSON.parse(workoutsJson) : []\n    const journalEntries = journalEntriesJson ? JSON.parse(journalEntriesJson) : []\n\n    // This would be a real API call in a production app\n    const response = await fetch(`${API_BASE_URL}/sync/upload`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        workouts,\n        journalEntries,\n        timestamp: new Date().toISOString(),\n      }),\n    })\n\n    if (response.ok) {\n      // Update last sync timestamp\n      await AsyncStorage.setItem(LAST_SYNC_KEY, new Date().toISOString())\n      return true\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error uploading data:\", error)\n    return false\n  }\n}\n\n// Download data from cloud\nexport const downloadData = async (): Promise<boolean> => {\n  try {\n    const token = await getAuthToken()\n    if (!token) {\n      return false\n    }\n\n    // Get last sync timestamp\n    const lastSync = (await AsyncStorage.getItem(LAST_SYNC_KEY)) || \"1970-01-01T00:00:00.000Z\"\n\n    // This would be a real API call in a production app\n    const response = await fetch(`${API_BASE_URL}/sync/download?since=${lastSync}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n\n    if (response.ok) {\n      const data = await response.json()\n\n      // Merge with local data (this would need a more sophisticated merge strategy in a real app)\n      if (data.workouts && data.workouts.length > 0) {\n        const workoutsJson = await AsyncStorage.getItem(\"workouts\")\n        const localWorkouts = workoutsJson ? JSON.parse(workoutsJson) : []\n\n        // Simple merge strategy: replace local with remote if newer\n        const mergedWorkouts = [...localWorkouts]\n        data.workouts.forEach((remoteWorkout: Workout) => {\n          const index = mergedWorkouts.findIndex((w) => w.id === remoteWorkout.id)\n          if (index >= 0) {\n            mergedWorkouts[index] = remoteWorkout\n          } else {\n            mergedWorkouts.push(remoteWorkout)\n          }\n        })\n\n        await AsyncStorage.setItem(\"workouts\", JSON.stringify(mergedWorkouts))\n      }\n\n      if (data.journalEntries && data.journalEntries.length > 0) {\n        const entriesJson = await AsyncStorage.getItem(\"journal_entries\")\n        const localEntries = entriesJson ? JSON.parse(entriesJson) : []\n\n        // Simple merge strategy: replace local with remote if newer\n        const mergedEntries = [...localEntries]\n        data.journalEntries.forEach((remoteEntry: JournalEntry) => {\n          const index = mergedEntries.findIndex((e) => e.id === remoteEntry.id)\n          if (index >= 0) {\n            mergedEntries[index] = remoteEntry\n          } else {\n            mergedEntries.push(remoteEntry)\n          }\n        })\n\n        await AsyncStorage.setItem(\"journal_entries\", JSON.stringify(mergedEntries))\n      }\n\n      // Update last sync timestamp\n      await AsyncStorage.setItem(LAST_SYNC_KEY, new Date().toISOString())\n      return true\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error downloading data:\", error)\n    return false\n  }\n}\n\n// Sync data (both upload and download)\nexport const syncData = async (): Promise<boolean> => {\n  const uploadSuccess = await uploadData()\n  if (!uploadSuccess) {\n    return false\n  }\n\n  const downloadSuccess = await downloadData()\n  return downloadSuccess\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}