{"ast":null,"code":"import { StringFormat } from '../Clipboard.types';\nimport { ClipboardUnavailableException, CopyFailureException, NoPermissionException, PasteFailureException } from './Exceptions';\nimport { base64toBlob, blobToBase64Async, findHtmlInClipboardAsync, findImageInClipboardAsync, getImageSizeFromBlobAsync, htmlToPlainText, isClipboardPermissionDeniedAsync } from './Utils';\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options) {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML:\n          {\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            if (!blob) {\n              return await navigator.clipboard.readText();\n            }\n            return await new Response(blob).text();\n          }\n        default:\n          {\n            let text = await navigator.clipboard.readText();\n            if (!text || text === '') {\n              const clipboardItems = await navigator.clipboard.read();\n              const blob = await findHtmlInClipboardAsync(clipboardItems);\n              const blobText = await blob?.text();\n              text = htmlToPlainText(blobText ?? '');\n            }\n            return text;\n          }\n      }\n    } catch (e) {\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      try {\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  setString(text) {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text, options) {\n    switch (options.inputFormat) {\n      case StringFormat.HTML:\n        {\n          if (!navigator.clipboard) {\n            throw new ClipboardUnavailableException();\n          }\n          try {\n            const clipboardItemInput = createHtmlClipboardItem(text);\n            await navigator.clipboard.write([clipboardItemInput]);\n            return true;\n          } catch (e) {\n            if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n              throw new NoPermissionException();\n            }\n            throw new CopyFailureException(e.message);\n          }\n        }\n      default:\n        {\n          try {\n            if (!navigator.clipboard) {\n              throw new Error();\n            }\n            await navigator.clipboard.writeText(text);\n            return true;\n          } catch {\n            return this.setString(text);\n          }\n        }\n    }\n  },\n  async hasStringAsync() {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options) {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n      const [data, size] = await Promise.all([blobToBase64Async(blob), getImageSizeFromBlobAsync(blob)]);\n      return {\n        data,\n        size\n      };\n    } catch (e) {\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image) {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n    try {\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([new ClipboardItem({\n        [blob.type]: blob\n      })]);\n    } catch (err) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync() {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener() {},\n  removeClipboardListener() {}\n};\nasync function clipboardHasTypesAsync(types) {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap(item => item.types).some(type => types.includes(type));\n  } catch (e) {\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\nfunction createHtmlClipboardItem(htmlString) {\n  return new ClipboardItem({\n    'text/html': new Blob([htmlString], {\n      type: 'text/html'\n    }),\n    'text/plain': new Blob([htmlToPlainText(htmlString)], {\n      type: 'text/plain'\n    })\n  });\n}","map":{"version":3,"names":["StringFormat","ClipboardUnavailableException","CopyFailureException","NoPermissionException","PasteFailureException","base64toBlob","blobToBase64Async","findHtmlInClipboardAsync","findImageInClipboardAsync","getImageSizeFromBlobAsync","htmlToPlainText","isClipboardPermissionDeniedAsync","name","getStringAsync","options","navigator","clipboard","preferredFormat","HTML","clipboardItems","read","blob","readText","Response","text","blobText","e","window","clipboardData","getData","Promise","reject","Error","setString","textField","document","createElement","textContent","body","appendChild","select","execCommand","removeChild","setStringAsync","inputFormat","clipboardItemInput","createHtmlClipboardItem","write","message","writeText","hasStringAsync","clipboardHasTypesAsync","getImageAsync","_options","data","size","all","setImageAsync","base64image","ClipboardItem","type","err","hasImageAsync","addClipboardListener","removeClipboardListener","types","flatMap","item","some","includes","htmlString","Blob"],"sources":["/Users/recep/Gym/node_modules/expo-clipboard/src/web/ClipboardModule.ts"],"sourcesContent":["import {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\nimport {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\n\nexport default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (e) {\n          // it might fail, because user denied permission\n          if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(e.message);\n        }\n      }\n      default: {\n        try {\n          if (!navigator.clipboard) {\n            throw new Error();\n          }\n          await navigator.clipboard.writeText(text);\n          return true;\n        } catch {\n          // we can fall back to legacy behavior in any kind of failure\n          // including navigator.clipboard unavailability\n          return this.setString(text);\n        }\n      }\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        new ClipboardItem({\n          [blob.type]: blob,\n        }),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (e) {\n    // it might fail, because user denied permission\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}