{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"transform\", \"origin\", \"originX\", \"originY\", \"fontFamily\", \"fontSize\", \"fontWeight\", \"fontStyle\", \"style\", \"forwardedRef\", \"gradientTransform\", \"patternTransform\"],\n  _excluded2 = [\"x\", \"y\"];\nimport * as React from 'react';\nimport ucE from \"react-native-web/dist/exports/createElement\";\nimport cE from \"react-native-web/dist/exports/createElement\";\nimport SvgTouchableMixin from './lib/SvgTouchableMixin';\nimport { resolve } from './lib/resolve';\nimport { transformsArrayToProps } from './lib/extract/extractTransform';\nconst createElement = cE || ucE;\nconst hasTouchableProperty = props => props.onPress || props.onPressIn || props.onPressOut || props.onLongPress;\nconst camelCaseToDashed = camelCase => {\n  return camelCase.replace(/[A-Z]/g, m => '-' + m.toLowerCase());\n};\nfunction stringifyTransformProps(transformProps) {\n  const transformArray = [];\n  if (transformProps.translate != null) {\n    transformArray.push(`translate(${transformProps.translate})`);\n  }\n  if (transformProps.translateX != null || transformProps.translateY != null) {\n    transformArray.push(`translate(${transformProps.translateX || 0}, ${transformProps.translateY || 0})`);\n  }\n  if (transformProps.scale != null) {\n    transformArray.push(`scale(${transformProps.scale})`);\n  }\n  if (transformProps.scaleX != null || transformProps.scaleY != null) {\n    transformArray.push(`scale(${transformProps.scaleX || 1}, ${transformProps.scaleY || 1})`);\n  }\n  if (transformProps.rotation != null) {\n    transformArray.push(`rotate(${transformProps.rotation})`);\n  }\n  if (transformProps.skewX != null) {\n    transformArray.push(`skewX(${transformProps.skewX})`);\n  }\n  if (transformProps.skewY != null) {\n    transformArray.push(`skewY(${transformProps.skewY})`);\n  }\n  return transformArray;\n}\nfunction parseTransformProp(transform, props) {\n  const transformArray = [];\n  props && transformArray.push(...stringifyTransformProps(props));\n  if (Array.isArray(transform)) {\n    if (typeof transform[0] === 'number') {\n      transformArray.push(`matrix(${transform.join(' ')})`);\n    } else {\n      const stringifiedProps = transformsArrayToProps(transform);\n      transformArray.push(...stringifyTransformProps(stringifiedProps));\n    }\n  } else if (typeof transform === 'string') {\n    transformArray.push(transform);\n  }\n  return transformArray.length ? transformArray.join(' ') : undefined;\n}\nconst prepare = function (self) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self.props;\n  const {\n      transform,\n      origin,\n      originX,\n      originY,\n      fontFamily,\n      fontSize,\n      fontWeight,\n      fontStyle,\n      style,\n      forwardedRef,\n      gradientTransform,\n      patternTransform\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  const clean = Object.assign({}, hasTouchableProperty(props) ? {\n    onStartShouldSetResponder: self.touchableHandleStartShouldSetResponder,\n    onResponderTerminationRequest: self.touchableHandleResponderTerminationRequest,\n    onResponderGrant: self.touchableHandleResponderGrant,\n    onResponderMove: self.touchableHandleResponderMove,\n    onResponderRelease: self.touchableHandleResponderRelease,\n    onResponderTerminate: self.touchableHandleResponderTerminate\n  } : null, rest);\n  if (origin != null) {\n    clean['transform-origin'] = origin.toString().replace(',', ' ');\n  } else if (originX != null || originY != null) {\n    clean['transform-origin'] = `${originX || 0} ${originY || 0}`;\n  }\n  clean.transform = parseTransformProp(transform, props);\n  clean.gradientTransform = parseTransformProp(gradientTransform);\n  clean.patternTransform = parseTransformProp(patternTransform);\n  clean.ref = el => {\n    self.elementRef.current = el;\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(el);\n    } else if (forwardedRef) {\n      forwardedRef.current = el;\n    }\n  };\n  const styles = {};\n  if (fontFamily != null) {\n    styles.fontFamily = fontFamily;\n  }\n  if (fontSize != null) {\n    styles.fontSize = fontSize;\n  }\n  if (fontWeight != null) {\n    styles.fontWeight = fontWeight;\n  }\n  if (fontStyle != null) {\n    styles.fontStyle = fontStyle;\n  }\n  clean.style = resolve(style, styles);\n  return clean;\n};\nconst getBoundingClientRect = node => {\n  if (node) {\n    const isElement = node.nodeType === 1;\n    if (isElement && typeof node.getBoundingClientRect === 'function') {\n      return node.getBoundingClientRect();\n    }\n  }\n};\nconst measureLayout = (node, callback) => {\n  const relativeNode = node && node.parentNode;\n  if (relativeNode) {\n    setTimeout(() => {\n      const relativeRect = getBoundingClientRect(relativeNode);\n      const {\n        height,\n        left,\n        top,\n        width\n      } = getBoundingClientRect(node);\n      const x = left - relativeRect.left;\n      const y = top - relativeRect.top;\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\nfunction remeasure() {\n  const tag = this.state.touchable.responderID;\n  if (tag == null) {\n    return;\n  }\n  measureLayout(tag, this._handleQueryLayout);\n}\nexport class WebShape extends React.Component {\n  prepareProps(props) {\n    return props;\n  }\n  elementRef = React.createRef();\n  lastMergedProps = {};\n  setNativeProps(props) {\n    const merged = Object.assign({}, this.props, this.lastMergedProps, props.style);\n    this.lastMergedProps = merged;\n    const clean = prepare(this, this.prepareProps(merged));\n    const current = this.elementRef.current;\n    if (current) {\n      for (const cleanAttribute of Object.keys(clean)) {\n        const cleanValue = clean[cleanAttribute];\n        switch (cleanAttribute) {\n          case 'ref':\n          case 'children':\n            break;\n          case 'style':\n            for (const partialStyle of [].concat(clean.style ?? [])) {\n              Object.assign(current.style, partialStyle);\n            }\n            break;\n          default:\n            current.setAttribute(camelCaseToDashed(cleanAttribute), cleanValue);\n            break;\n        }\n      }\n    }\n  }\n  constructor(props, context) {\n    super(props, context);\n    if (hasTouchableProperty(props)) {\n      SvgTouchableMixin(this);\n    }\n    this._remeasureMetricsOnActivation = remeasure.bind(this);\n  }\n  render() {\n    if (!this.tag) {\n      throw new Error('When extending `WebShape` you need to overwrite either `tag` or `render`!');\n    }\n    this.lastMergedProps = {};\n    return createElement(this.tag, prepare(this, this.prepareProps(this.props)));\n  }\n}\nexport class Circle extends WebShape {\n  tag = 'circle';\n}\nexport class ClipPath extends WebShape {\n  tag = 'clipPath';\n}\nexport class Defs extends WebShape {\n  tag = 'defs';\n}\nexport class Ellipse extends WebShape {\n  tag = 'ellipse';\n}\nexport class G extends WebShape {\n  tag = 'g';\n  prepareProps(props) {\n    const {\n        x,\n        y\n      } = props,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n    if ((x || y) && !rest.translate) {\n      rest.translate = `${x || 0}, ${y || 0}`;\n    }\n    return rest;\n  }\n}\nexport class Image extends WebShape {\n  tag = 'image';\n}\nexport class Line extends WebShape {\n  tag = 'line';\n}\nexport class LinearGradient extends WebShape {\n  tag = 'linearGradient';\n}\nexport class Path extends WebShape {\n  tag = 'path';\n}\nexport class Polygon extends WebShape {\n  tag = 'polygon';\n}\nexport class Polyline extends WebShape {\n  tag = 'polyline';\n}\nexport class RadialGradient extends WebShape {\n  tag = 'radialGradient';\n}\nexport class Rect extends WebShape {\n  tag = 'rect';\n}\nexport class Stop extends WebShape {\n  tag = 'stop';\n}\nexport class Svg extends WebShape {\n  tag = 'svg';\n}\nexport class Symbol extends WebShape {\n  tag = 'symbol';\n}\nexport class Text extends WebShape {\n  tag = 'text';\n}\nexport class TSpan extends WebShape {\n  tag = 'tspan';\n}\nexport class TextPath extends WebShape {\n  tag = 'textPath';\n}\nexport class Use extends WebShape {\n  tag = 'use';\n}\nexport class Mask extends WebShape {\n  tag = 'mask';\n}\nexport class ForeignObject extends WebShape {\n  tag = 'foreignObject';\n}\nexport class Marker extends WebShape {\n  tag = 'marker';\n}\nexport class Pattern extends WebShape {\n  tag = 'pattern';\n}\nexport default Svg;","map":{"version":3,"names":["React","ucE","cE","SvgTouchableMixin","resolve","transformsArrayToProps","createElement","hasTouchableProperty","props","onPress","onPressIn","onPressOut","onLongPress","camelCaseToDashed","camelCase","replace","m","toLowerCase","stringifyTransformProps","transformProps","transformArray","translate","push","translateX","translateY","scale","scaleX","scaleY","rotation","skewX","skewY","parseTransformProp","transform","Array","isArray","join","stringifiedProps","length","undefined","prepare","self","arguments","origin","originX","originY","fontFamily","fontSize","fontWeight","fontStyle","style","forwardedRef","gradientTransform","patternTransform","rest","_objectWithoutPropertiesLoose","_excluded","clean","Object","assign","onStartShouldSetResponder","touchableHandleStartShouldSetResponder","onResponderTerminationRequest","touchableHandleResponderTerminationRequest","onResponderGrant","touchableHandleResponderGrant","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","toString","ref","el","elementRef","current","styles","getBoundingClientRect","node","isElement","nodeType","measureLayout","callback","relativeNode","parentNode","setTimeout","relativeRect","height","left","top","width","x","y","remeasure","tag","state","touchable","responderID","_handleQueryLayout","WebShape","Component","prepareProps","createRef","lastMergedProps","setNativeProps","merged","cleanAttribute","keys","cleanValue","partialStyle","concat","setAttribute","constructor","context","_remeasureMetricsOnActivation","bind","render","Error","Circle","ClipPath","Defs","Ellipse","G","_excluded2","Image","Line","LinearGradient","Path","Polygon","Polyline","RadialGradient","Rect","Stop","Svg","Symbol","Text","TSpan","TextPath","Use","Mask","ForeignObject","Marker","Pattern"],"sources":["/Users/recep/Gym/node_modules/react-native-svg/src/ReactNativeSVG.web.ts"],"sourcesContent":["import * as React from 'react';\nimport type { GestureResponderEvent, TransformsStyle } from 'react-native';\nimport {\n  // @ts-ignore\n  unstable_createElement as ucE,\n  createElement as cE,\n} from 'react-native';\nimport type {\n  NumberArray,\n  NumberProp,\n  TransformProps,\n} from './lib/extract/types';\nimport SvgTouchableMixin from './lib/SvgTouchableMixin';\nimport { resolve } from './lib/resolve';\nimport { transformsArrayToProps } from './lib/extract/extractTransform';\n\nconst createElement = cE || ucE;\n\ntype BlurEvent = Object;\ntype FocusEvent = Object;\ntype PressEvent = Object;\ntype LayoutEvent = Object;\ntype EdgeInsetsProp = Object;\n\ninterface BaseProps {\n  accessible?: boolean;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  accessibilityIgnoresInvertColors?: boolean;\n  accessibilityRole?: string;\n  accessibilityState?: Object;\n  delayLongPress?: number;\n  delayPressIn?: number;\n  delayPressOut?: number;\n  disabled?: boolean;\n  hitSlop?: EdgeInsetsProp;\n  nativeID?: string;\n  touchSoundDisabled?: boolean;\n  onBlur?: (e: BlurEvent) => void;\n  onFocus?: (e: FocusEvent) => void;\n  onLayout?: (event: LayoutEvent) => object;\n  onLongPress?: (event: PressEvent) => object;\n  onClick?: (event: PressEvent) => object;\n  onPress?: (event: PressEvent) => object;\n  onPressIn?: (event: PressEvent) => object;\n  onPressOut?: (event: PressEvent) => object;\n  pressRetentionOffset?: EdgeInsetsProp;\n  rejectResponderTermination?: boolean;\n\n  transform?: TransformProps['transform'];\n  translate?: NumberArray;\n  translateX?: NumberProp;\n  translateY?: NumberProp;\n  scale?: NumberArray;\n  scaleX?: NumberProp;\n  scaleY?: NumberProp;\n  rotation?: NumberProp;\n  skewX?: NumberProp;\n  skewY?: NumberProp;\n  origin?: NumberArray;\n  originX?: NumberProp;\n  originY?: NumberProp;\n\n  fontStyle?: string;\n  fontWeight?: NumberProp;\n  fontSize?: NumberProp;\n  fontFamily?: string;\n  forwardedRef?:\n    | React.RefCallback<SVGElement>\n    | React.MutableRefObject<SVGElement | null>;\n  style: Iterable<{}>;\n\n  // different tranform props\n  gradientTransform: TransformProps['transform'];\n  patternTransform: TransformProps['transform'];\n}\n\nconst hasTouchableProperty = (props: BaseProps) =>\n  props.onPress || props.onPressIn || props.onPressOut || props.onLongPress;\n\nconst camelCaseToDashed = (camelCase: string) => {\n  return camelCase.replace(/[A-Z]/g, (m) => '-' + m.toLowerCase());\n};\n\nfunction stringifyTransformProps(transformProps: TransformProps) {\n  const transformArray = [];\n  if (transformProps.translate != null) {\n    transformArray.push(`translate(${transformProps.translate})`);\n  }\n  if (transformProps.translateX != null || transformProps.translateY != null) {\n    transformArray.push(\n      `translate(${transformProps.translateX || 0}, ${\n        transformProps.translateY || 0\n      })`,\n    );\n  }\n  if (transformProps.scale != null) {\n    transformArray.push(`scale(${transformProps.scale})`);\n  }\n  if (transformProps.scaleX != null || transformProps.scaleY != null) {\n    transformArray.push(\n      `scale(${transformProps.scaleX || 1}, ${transformProps.scaleY || 1})`,\n    );\n  }\n  // rotation maps to rotate, not to collide with the text rotate attribute (which acts per glyph rather than block)\n  if (transformProps.rotation != null) {\n    transformArray.push(`rotate(${transformProps.rotation})`);\n  }\n  if (transformProps.skewX != null) {\n    transformArray.push(`skewX(${transformProps.skewX})`);\n  }\n  if (transformProps.skewY != null) {\n    transformArray.push(`skewY(${transformProps.skewY})`);\n  }\n  return transformArray;\n}\n\nfunction parseTransformProp(\n  transform: TransformProps['transform'],\n  props?: BaseProps,\n) {\n  const transformArray: string[] = [];\n\n  props && transformArray.push(...stringifyTransformProps(props));\n\n  if (Array.isArray(transform)) {\n    if (typeof transform[0] === 'number') {\n      transformArray.push(`matrix(${transform.join(' ')})`);\n    } else {\n      const stringifiedProps = transformsArrayToProps(\n        transform as TransformsStyle['transform'],\n      );\n      transformArray.push(...stringifyTransformProps(stringifiedProps));\n    }\n  } else if (typeof transform === 'string') {\n    transformArray.push(transform);\n  }\n\n  return transformArray.length ? transformArray.join(' ') : undefined;\n}\n\n/**\n * `react-native-svg` supports additional props that aren't defined in the spec.\n * This function replaces them in a spec conforming manner.\n *\n * @param {WebShape} self Instance given to us.\n * @param {Object?} props Optional overridden props given to us.\n * @returns {Object} Cleaned props object.\n * @private\n */\nconst prepare = <T extends BaseProps>(\n  self: WebShape<T>,\n  props = self.props,\n) => {\n  const {\n    transform,\n    origin,\n    originX,\n    originY,\n    fontFamily,\n    fontSize,\n    fontWeight,\n    fontStyle,\n    style,\n    forwardedRef,\n    gradientTransform,\n    patternTransform,\n    ...rest\n  } = props;\n\n  const clean: {\n    onStartShouldSetResponder?: (e: GestureResponderEvent) => boolean;\n    onResponderMove?: (e: GestureResponderEvent) => void;\n    onResponderGrant?: (e: GestureResponderEvent) => void;\n    onResponderRelease?: (e: GestureResponderEvent) => void;\n    onResponderTerminate?: (e: GestureResponderEvent) => void;\n    onResponderTerminationRequest?: (e: GestureResponderEvent) => boolean;\n    transform?: string;\n    gradientTransform?: string;\n    patternTransform?: string;\n    'transform-origin'?: string;\n    style?: {};\n    ref?: {};\n  } = {\n    ...(hasTouchableProperty(props)\n      ? {\n          onStartShouldSetResponder:\n            self.touchableHandleStartShouldSetResponder,\n          onResponderTerminationRequest:\n            self.touchableHandleResponderTerminationRequest,\n          onResponderGrant: self.touchableHandleResponderGrant,\n          onResponderMove: self.touchableHandleResponderMove,\n          onResponderRelease: self.touchableHandleResponderRelease,\n          onResponderTerminate: self.touchableHandleResponderTerminate,\n        }\n      : null),\n    ...rest,\n  };\n\n  if (origin != null) {\n    clean['transform-origin'] = origin.toString().replace(',', ' ');\n  } else if (originX != null || originY != null) {\n    clean['transform-origin'] = `${originX || 0} ${originY || 0}`;\n  }\n\n  clean.transform = parseTransformProp(transform, props);\n  clean.gradientTransform = parseTransformProp(gradientTransform);\n  clean.patternTransform = parseTransformProp(patternTransform);\n\n  clean.ref = (el: SVGElement | null) => {\n    self.elementRef.current = el;\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(el);\n    } else if (forwardedRef) {\n      forwardedRef.current = el;\n    }\n  };\n\n  const styles: {\n    fontStyle?: string;\n    fontFamily?: string;\n    fontSize?: NumberProp;\n    fontWeight?: NumberProp;\n  } = {};\n\n  if (fontFamily != null) {\n    styles.fontFamily = fontFamily;\n  }\n  if (fontSize != null) {\n    styles.fontSize = fontSize;\n  }\n  if (fontWeight != null) {\n    styles.fontWeight = fontWeight;\n  }\n  if (fontStyle != null) {\n    styles.fontStyle = fontStyle;\n  }\n  clean.style = resolve(style, styles);\n\n  return clean;\n};\n\nconst getBoundingClientRect = (node: SVGElement) => {\n  if (node) {\n    // @ts-ignore\n    const isElement = node.nodeType === 1; /* Node.ELEMENT_NODE */\n    // @ts-ignore\n    if (isElement && typeof node.getBoundingClientRect === 'function') {\n      // @ts-ignore\n      return node.getBoundingClientRect();\n    }\n  }\n};\n\nconst measureLayout = (\n  node: SVGElement,\n  callback: (\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    left: number,\n    top: number,\n  ) => void,\n) => {\n  // @ts-ignore\n  const relativeNode = node && node.parentNode;\n  if (relativeNode) {\n    setTimeout(() => {\n      // @ts-ignore\n      const relativeRect = getBoundingClientRect(relativeNode);\n      const { height, left, top, width } = getBoundingClientRect(node);\n      const x = left - relativeRect.left;\n      const y = top - relativeRect.top;\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\n\nfunction remeasure() {\n  // @ts-ignore\n  const tag = this.state.touchable.responderID;\n  if (tag == null) {\n    return;\n  }\n  // @ts-ignore\n  measureLayout(tag, this._handleQueryLayout);\n}\n\nexport class WebShape<\n  P extends BaseProps = BaseProps,\n  C = {},\n> extends React.Component<P, C> {\n  [x: string]: unknown;\n  protected tag?: React.ElementType;\n  protected prepareProps(props: P) {\n    return props;\n  }\n\n  elementRef =\n    React.createRef<SVGElement>() as React.MutableRefObject<SVGElement | null>;\n  lastMergedProps: Partial<P> = {};\n\n  /**\n   * disclaimer: I am not sure why the props are wrapped in a `style` attribute here, but that's how reanimated calls it\n   */\n  setNativeProps(props: { style: P }) {\n    const merged = Object.assign(\n      {},\n      this.props,\n      this.lastMergedProps,\n      props.style,\n    );\n    this.lastMergedProps = merged;\n    const clean = prepare(this, this.prepareProps(merged));\n    const current = this.elementRef.current;\n    if (current) {\n      for (const cleanAttribute of Object.keys(clean)) {\n        const cleanValue = clean[cleanAttribute as keyof typeof clean];\n        switch (cleanAttribute) {\n          case 'ref':\n          case 'children':\n            break;\n          case 'style':\n            // style can be an object here or an array, so we convert it to an array and assign each element\n            for (const partialStyle of ([] as {}[]).concat(clean.style ?? [])) {\n              // @ts-expect-error \"DOM\" is not part of `compilerOptions.lib`\n              Object.assign(current.style, partialStyle);\n            }\n            break;\n          default:\n            // apply all other incoming prop updates as attributes on the node\n            // same logic as in https://github.com/software-mansion/react-native-reanimated/blob/d04720c82f5941532991b235787285d36d717247/src/reanimated2/js-reanimated/index.ts#L38-L39\n            // @ts-expect-error \"DOM\" is not part of `compilerOptions.lib`\n            current.setAttribute(camelCaseToDashed(cleanAttribute), cleanValue);\n            break;\n        }\n      }\n    }\n  }\n\n  _remeasureMetricsOnActivation: () => void;\n  touchableHandleStartShouldSetResponder?: (\n    e: GestureResponderEvent,\n  ) => boolean;\n  touchableHandleResponderMove?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderGrant?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderRelease?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminate?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminationRequest?: (\n    e: GestureResponderEvent,\n  ) => boolean;\n  constructor(props: P, context: C) {\n    super(props, context);\n\n    // Do not attach touchable mixin handlers if SVG element doesn't have a touchable prop\n    if (hasTouchableProperty(props)) {\n      SvgTouchableMixin(this);\n    }\n\n    this._remeasureMetricsOnActivation = remeasure.bind(this);\n  }\n\n  render(): JSX.Element {\n    if (!this.tag) {\n      throw new Error(\n        'When extending `WebShape` you need to overwrite either `tag` or `render`!',\n      );\n    }\n    this.lastMergedProps = {};\n    return createElement(\n      this.tag,\n      prepare(this, this.prepareProps(this.props)),\n    );\n  }\n}\n\nexport class Circle extends WebShape {\n  tag = 'circle' as const;\n}\n\nexport class ClipPath extends WebShape {\n  tag = 'clipPath' as const;\n}\n\nexport class Defs extends WebShape {\n  tag = 'defs' as const;\n}\n\nexport class Ellipse extends WebShape {\n  tag = 'ellipse' as const;\n}\n\nexport class G extends WebShape<\n  BaseProps & {\n    x?: NumberProp;\n    y?: NumberProp;\n    translate?: string;\n  }\n> {\n  tag = 'g' as const;\n  prepareProps(\n    props: BaseProps & {\n      x?: NumberProp;\n      y?: NumberProp;\n      translate?: string;\n    },\n  ) {\n    const { x, y, ...rest } = props;\n\n    if ((x || y) && !rest.translate) {\n      rest.translate = `${x || 0}, ${y || 0}`;\n    }\n\n    return rest;\n  }\n}\n\nexport class Image extends WebShape {\n  tag = 'image' as const;\n}\n\nexport class Line extends WebShape {\n  tag = 'line' as const;\n}\n\nexport class LinearGradient extends WebShape {\n  tag = 'linearGradient' as const;\n}\n\nexport class Path extends WebShape {\n  tag = 'path' as const;\n}\n\nexport class Polygon extends WebShape {\n  tag = 'polygon' as const;\n}\n\nexport class Polyline extends WebShape {\n  tag = 'polyline' as const;\n}\n\nexport class RadialGradient extends WebShape {\n  tag = 'radialGradient' as const;\n}\n\nexport class Rect extends WebShape {\n  tag = 'rect' as const;\n}\n\nexport class Stop extends WebShape {\n  tag = 'stop' as const;\n}\n\nexport class Svg extends WebShape {\n  tag = 'svg' as const;\n}\n\nexport class Symbol extends WebShape {\n  tag = 'symbol' as const;\n}\n\nexport class Text extends WebShape {\n  tag = 'text' as const;\n}\n\nexport class TSpan extends WebShape {\n  tag = 'tspan' as const;\n}\n\nexport class TextPath extends WebShape {\n  tag = 'textPath' as const;\n}\n\nexport class Use extends WebShape {\n  tag = 'use' as const;\n}\n\nexport class Mask extends WebShape {\n  tag = 'mask' as const;\n}\n\nexport class ForeignObject extends WebShape {\n  tag = 'foreignObject' as const;\n}\n\nexport class Marker extends WebShape {\n  tag = 'marker' as const;\n}\n\nexport class Pattern extends WebShape {\n  tag = 'pattern' as const;\n}\n\nexport default Svg;\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,GAAA;AAAA,OAAAC,EAAA;AAY9B,OAAOC,iBAAiB,MAAM,yBAAyB;AACvD,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,sBAAsB,QAAQ,gCAAgC;AAEvE,MAAMC,aAAa,GAAGJ,EAAE,IAAID,GAAG;AA6D/B,MAAMM,oBAAoB,GAAIC,KAAgB,IAC5CA,KAAK,CAACC,OAAO,IAAID,KAAK,CAACE,SAAS,IAAIF,KAAK,CAACG,UAAU,IAAIH,KAAK,CAACI,WAAW;AAE3E,MAAMC,iBAAiB,GAAIC,SAAiB,IAAK;EAC/C,OAAOA,SAAS,CAACC,OAAO,CAAC,QAAQ,EAAGC,CAAC,IAAK,GAAG,GAAGA,CAAC,CAACC,WAAW,EAAE,CAAC;AAClE,CAAC;AAED,SAASC,uBAAuBA,CAACC,cAA8B,EAAE;EAC/D,MAAMC,cAAc,GAAG,EAAE;EACzB,IAAID,cAAc,CAACE,SAAS,IAAI,IAAI,EAAE;IACpCD,cAAc,CAACE,IAAI,CAAE,aAAYH,cAAc,CAACE,SAAU,GAAE,CAAC;EAC/D;EACA,IAAIF,cAAc,CAACI,UAAU,IAAI,IAAI,IAAIJ,cAAc,CAACK,UAAU,IAAI,IAAI,EAAE;IAC1EJ,cAAc,CAACE,IAAI,CAChB,aAAYH,cAAc,CAACI,UAAU,IAAI,CAAE,KAC1CJ,cAAc,CAACK,UAAU,IAAI,CAC9B,GAAE,CACJ;EACH;EACA,IAAIL,cAAc,CAACM,KAAK,IAAI,IAAI,EAAE;IAChCL,cAAc,CAACE,IAAI,CAAE,SAAQH,cAAc,CAACM,KAAM,GAAE,CAAC;EACvD;EACA,IAAIN,cAAc,CAACO,MAAM,IAAI,IAAI,IAAIP,cAAc,CAACQ,MAAM,IAAI,IAAI,EAAE;IAClEP,cAAc,CAACE,IAAI,CAChB,SAAQH,cAAc,CAACO,MAAM,IAAI,CAAE,KAAIP,cAAc,CAACQ,MAAM,IAAI,CAAE,GAAE,CACtE;EACH;EAEA,IAAIR,cAAc,CAACS,QAAQ,IAAI,IAAI,EAAE;IACnCR,cAAc,CAACE,IAAI,CAAE,UAASH,cAAc,CAACS,QAAS,GAAE,CAAC;EAC3D;EACA,IAAIT,cAAc,CAACU,KAAK,IAAI,IAAI,EAAE;IAChCT,cAAc,CAACE,IAAI,CAAE,SAAQH,cAAc,CAACU,KAAM,GAAE,CAAC;EACvD;EACA,IAAIV,cAAc,CAACW,KAAK,IAAI,IAAI,EAAE;IAChCV,cAAc,CAACE,IAAI,CAAE,SAAQH,cAAc,CAACW,KAAM,GAAE,CAAC;EACvD;EACA,OAAOV,cAAc;AACvB;AAEA,SAASW,kBAAkBA,CACzBC,SAAsC,EACtCxB,KAAiB,EACjB;EACA,MAAMY,cAAwB,GAAG,EAAE;EAEnCZ,KAAK,IAAIY,cAAc,CAACE,IAAI,CAAC,GAAGJ,uBAAuB,CAACV,KAAK,CAAC,CAAC;EAE/D,IAAIyB,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,EAAE;IAC5B,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACpCZ,cAAc,CAACE,IAAI,CAAE,UAASU,SAAS,CAACG,IAAI,CAAC,GAAG,CAAE,GAAE,CAAC;IACvD,CAAC,MAAM;MACL,MAAMC,gBAAgB,GAAG/B,sBAAsB,CAC7C2B,SAAS,CACV;MACDZ,cAAc,CAACE,IAAI,CAAC,GAAGJ,uBAAuB,CAACkB,gBAAgB,CAAC,CAAC;IACnE;EACF,CAAC,MAAM,IAAI,OAAOJ,SAAS,KAAK,QAAQ,EAAE;IACxCZ,cAAc,CAACE,IAAI,CAACU,SAAS,CAAC;EAChC;EAEA,OAAOZ,cAAc,CAACiB,MAAM,GAAGjB,cAAc,CAACe,IAAI,CAAC,GAAG,CAAC,GAAGG,SAAS;AACrE;AAWA,MAAMC,OAAO,GAAG,SAAAA,CACdC,IAAiB,EAEd;EAAA,IADHhC,KAAK,GAAAiC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAGD,IAAI,CAAChC,KAAK;EAElB,MAAM;MACJwB,SAAS;MACTU,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,UAAU;MACVC,QAAQ;MACRC,UAAU;MACVC,SAAS;MACTC,KAAK;MACLC,YAAY;MACZC,iBAAiB;MACjBC;IAEF,CAAC,GAAG5C,KAAK;IADJ6C,IAAA,GAAAC,6BAAA,CACD9C,KAAK,EAAA+C,SAAA;EAET,MAAMC,KAaL,GAAAC,MAAA,CAAAC,MAAA,KACKnD,oBAAoB,CAACC,KAAK,CAAC,GAC3B;IACEmD,yBAAyB,EACvBnB,IAAI,CAACoB,sCAAsC;IAC7CC,6BAA6B,EAC3BrB,IAAI,CAACsB,0CAA0C;IACjDC,gBAAgB,EAAEvB,IAAI,CAACwB,6BAA6B;IACpDC,eAAe,EAAEzB,IAAI,CAAC0B,4BAA4B;IAClDC,kBAAkB,EAAE3B,IAAI,CAAC4B,+BAA+B;IACxDC,oBAAoB,EAAE7B,IAAI,CAAC8B;EAC7B,CAAC,GACD,IAAI,EACLjB,IAAA,CACJ;EAED,IAAIX,MAAM,IAAI,IAAI,EAAE;IAClBc,KAAK,CAAC,kBAAkB,CAAC,GAAGd,MAAM,CAAC6B,QAAQ,EAAE,CAACxD,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;EACjE,CAAC,MAAM,IAAI4B,OAAO,IAAI,IAAI,IAAIC,OAAO,IAAI,IAAI,EAAE;IAC7CY,KAAK,CAAC,kBAAkB,CAAC,GAAI,GAAEb,OAAO,IAAI,CAAE,IAAGC,OAAO,IAAI,CAAE,EAAC;EAC/D;EAEAY,KAAK,CAACxB,SAAS,GAAGD,kBAAkB,CAACC,SAAS,EAAExB,KAAK,CAAC;EACtDgD,KAAK,CAACL,iBAAiB,GAAGpB,kBAAkB,CAACoB,iBAAiB,CAAC;EAC/DK,KAAK,CAACJ,gBAAgB,GAAGrB,kBAAkB,CAACqB,gBAAgB,CAAC;EAE7DI,KAAK,CAACgB,GAAG,GAAIC,EAAqB,IAAK;IACrCjC,IAAI,CAACkC,UAAU,CAACC,OAAO,GAAGF,EAAE;IAC5B,IAAI,OAAOvB,YAAY,KAAK,UAAU,EAAE;MACtCA,YAAY,CAACuB,EAAE,CAAC;IAClB,CAAC,MAAM,IAAIvB,YAAY,EAAE;MACvBA,YAAY,CAACyB,OAAO,GAAGF,EAAE;IAC3B;EACF,CAAC;EAED,MAAMG,MAKL,GAAG,CAAC,CAAC;EAEN,IAAI/B,UAAU,IAAI,IAAI,EAAE;IACtB+B,MAAM,CAAC/B,UAAU,GAAGA,UAAU;EAChC;EACA,IAAIC,QAAQ,IAAI,IAAI,EAAE;IACpB8B,MAAM,CAAC9B,QAAQ,GAAGA,QAAQ;EAC5B;EACA,IAAIC,UAAU,IAAI,IAAI,EAAE;IACtB6B,MAAM,CAAC7B,UAAU,GAAGA,UAAU;EAChC;EACA,IAAIC,SAAS,IAAI,IAAI,EAAE;IACrB4B,MAAM,CAAC5B,SAAS,GAAGA,SAAS;EAC9B;EACAQ,KAAK,CAACP,KAAK,GAAG7C,OAAO,CAAC6C,KAAK,EAAE2B,MAAM,CAAC;EAEpC,OAAOpB,KAAK;AACd,CAAC;AAED,MAAMqB,qBAAqB,GAAIC,IAAgB,IAAK;EAClD,IAAIA,IAAI,EAAE;IAER,MAAMC,SAAS,GAAGD,IAAI,CAACE,QAAQ,KAAK,CAAC;IAErC,IAAID,SAAS,IAAI,OAAOD,IAAI,CAACD,qBAAqB,KAAK,UAAU,EAAE;MAEjE,OAAOC,IAAI,CAACD,qBAAqB,EAAE;IACrC;EACF;AACF,CAAC;AAED,MAAMI,aAAa,GAAGA,CACpBH,IAAgB,EAChBI,QAOS,KACN;EAEH,MAAMC,YAAY,GAAGL,IAAI,IAAIA,IAAI,CAACM,UAAU;EAC5C,IAAID,YAAY,EAAE;IAChBE,UAAU,CAAC,MAAM;MAEf,MAAMC,YAAY,GAAGT,qBAAqB,CAACM,YAAY,CAAC;MACxD,MAAM;QAAEI,MAAM;QAAEC,IAAI;QAAEC,GAAG;QAAEC;MAAM,CAAC,GAAGb,qBAAqB,CAACC,IAAI,CAAC;MAChE,MAAMa,CAAC,GAAGH,IAAI,GAAGF,YAAY,CAACE,IAAI;MAClC,MAAMI,CAAC,GAAGH,GAAG,GAAGH,YAAY,CAACG,GAAG;MAChCP,QAAQ,CAACS,CAAC,EAAEC,CAAC,EAAEF,KAAK,EAAEH,MAAM,EAAEC,IAAI,EAAEC,GAAG,CAAC;IAC1C,CAAC,EAAE,CAAC,CAAC;EACP;AACF,CAAC;AAED,SAASI,SAASA,CAAA,EAAG;EAEnB,MAAMC,GAAG,GAAG,IAAI,CAACC,KAAK,CAACC,SAAS,CAACC,WAAW;EAC5C,IAAIH,GAAG,IAAI,IAAI,EAAE;IACf;EACF;EAEAb,aAAa,CAACa,GAAG,EAAE,IAAI,CAACI,kBAAkB,CAAC;AAC7C;AAEA,OAAO,MAAMC,QAAQ,SAGXnG,KAAK,CAACoG,SAAS,CAAO;EAGpBC,YAAYA,CAAC7F,KAAQ,EAAE;IAC/B,OAAOA,KAAK;EACd;EAEAkE,UAAU,GACR1E,KAAK,CAACsG,SAAS,EAAc;EAC/BC,eAAe,GAAe,CAAC,CAAC;EAKhCC,cAAcA,CAAChG,KAAmB,EAAE;IAClC,MAAMiG,MAAM,GAAGhD,MAAM,CAACC,MAAM,CAC1B,CAAC,CAAC,EACF,IAAI,CAAClD,KAAK,EACV,IAAI,CAAC+F,eAAe,EACpB/F,KAAK,CAACyC,KAAK,CACZ;IACD,IAAI,CAACsD,eAAe,GAAGE,MAAM;IAC7B,MAAMjD,KAAK,GAAGjB,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC8D,YAAY,CAACI,MAAM,CAAC,CAAC;IACtD,MAAM9B,OAAO,GAAG,IAAI,CAACD,UAAU,CAACC,OAAO;IACvC,IAAIA,OAAO,EAAE;MACX,KAAK,MAAM+B,cAAc,IAAIjD,MAAM,CAACkD,IAAI,CAACnD,KAAK,CAAC,EAAE;QAC/C,MAAMoD,UAAU,GAAGpD,KAAK,CAACkD,cAAc,CAAuB;QAC9D,QAAQA,cAAc;UACpB,KAAK,KAAK;UACV,KAAK,UAAU;YACb;UACF,KAAK,OAAO;YAEV,KAAK,MAAMG,YAAY,IAAK,EAAE,CAAUC,MAAM,CAACtD,KAAK,CAACP,KAAK,IAAI,EAAE,CAAC,EAAE;cAEjEQ,MAAM,CAACC,MAAM,CAACiB,OAAO,CAAC1B,KAAK,EAAE4D,YAAY,CAAC;YAC5C;YACA;UACF;YAIElC,OAAO,CAACoC,YAAY,CAAClG,iBAAiB,CAAC6F,cAAc,CAAC,EAAEE,UAAU,CAAC;YACnE;QAAM;MAEZ;IACF;EACF;EAaAI,WAAWA,CAACxG,KAAQ,EAAEyG,OAAU,EAAE;IAChC,KAAK,CAACzG,KAAK,EAAEyG,OAAO,CAAC;IAGrB,IAAI1G,oBAAoB,CAACC,KAAK,CAAC,EAAE;MAC/BL,iBAAiB,CAAC,IAAI,CAAC;IACzB;IAEA,IAAI,CAAC+G,6BAA6B,GAAGrB,SAAS,CAACsB,IAAI,CAAC,IAAI,CAAC;EAC3D;EAEAC,MAAMA,CAAA,EAAgB;IACpB,IAAI,CAAC,IAAI,CAACtB,GAAG,EAAE;MACb,MAAM,IAAIuB,KAAK,CACb,2EAA2E,CAC5E;IACH;IACA,IAAI,CAACd,eAAe,GAAG,CAAC,CAAC;IACzB,OAAOjG,aAAa,CAClB,IAAI,CAACwF,GAAG,EACRvD,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC8D,YAAY,CAAC,IAAI,CAAC7F,KAAK,CAAC,CAAC,CAC7C;EACH;AACF;AAEA,OAAO,MAAM8G,MAAM,SAASnB,QAAQ,CAAC;EACnCL,GAAG,GAAG,QAAQ;AAChB;AAEA,OAAO,MAAMyB,QAAQ,SAASpB,QAAQ,CAAC;EACrCL,GAAG,GAAG,UAAU;AAClB;AAEA,OAAO,MAAM0B,IAAI,SAASrB,QAAQ,CAAC;EACjCL,GAAG,GAAG,MAAM;AACd;AAEA,OAAO,MAAM2B,OAAO,SAAStB,QAAQ,CAAC;EACpCL,GAAG,GAAG,SAAS;AACjB;AAEA,OAAO,MAAM4B,CAAC,SAASvB,QAAQ,CAM7B;EACAL,GAAG,GAAG,GAAG;EACTO,YAAYA,CACV7F,KAIC,EACD;IACA,MAAM;QAAEmF,CAAC;QAAEC;MAAW,CAAC,GAAGpF,KAAK;MAAd6C,IAAA,GAAAC,6BAAA,CAAS9C,KAAK,EAAAmH,UAAA;IAE/B,IAAI,CAAChC,CAAC,IAAIC,CAAC,KAAK,CAACvC,IAAI,CAAChC,SAAS,EAAE;MAC/BgC,IAAI,CAAChC,SAAS,GAAI,GAAEsE,CAAC,IAAI,CAAE,KAAIC,CAAC,IAAI,CAAE,EAAC;IACzC;IAEA,OAAOvC,IAAI;EACb;AACF;AAEA,OAAO,MAAMuE,KAAK,SAASzB,QAAQ,CAAC;EAClCL,GAAG,GAAG,OAAO;AACf;AAEA,OAAO,MAAM+B,IAAI,SAAS1B,QAAQ,CAAC;EACjCL,GAAG,GAAG,MAAM;AACd;AAEA,OAAO,MAAMgC,cAAc,SAAS3B,QAAQ,CAAC;EAC3CL,GAAG,GAAG,gBAAgB;AACxB;AAEA,OAAO,MAAMiC,IAAI,SAAS5B,QAAQ,CAAC;EACjCL,GAAG,GAAG,MAAM;AACd;AAEA,OAAO,MAAMkC,OAAO,SAAS7B,QAAQ,CAAC;EACpCL,GAAG,GAAG,SAAS;AACjB;AAEA,OAAO,MAAMmC,QAAQ,SAAS9B,QAAQ,CAAC;EACrCL,GAAG,GAAG,UAAU;AAClB;AAEA,OAAO,MAAMoC,cAAc,SAAS/B,QAAQ,CAAC;EAC3CL,GAAG,GAAG,gBAAgB;AACxB;AAEA,OAAO,MAAMqC,IAAI,SAAShC,QAAQ,CAAC;EACjCL,GAAG,GAAG,MAAM;AACd;AAEA,OAAO,MAAMsC,IAAI,SAASjC,QAAQ,CAAC;EACjCL,GAAG,GAAG,MAAM;AACd;AAEA,OAAO,MAAMuC,GAAG,SAASlC,QAAQ,CAAC;EAChCL,GAAG,GAAG,KAAK;AACb;AAEA,OAAO,MAAMwC,MAAM,SAASnC,QAAQ,CAAC;EACnCL,GAAG,GAAG,QAAQ;AAChB;AAEA,OAAO,MAAMyC,IAAI,SAASpC,QAAQ,CAAC;EACjCL,GAAG,GAAG,MAAM;AACd;AAEA,OAAO,MAAM0C,KAAK,SAASrC,QAAQ,CAAC;EAClCL,GAAG,GAAG,OAAO;AACf;AAEA,OAAO,MAAM2C,QAAQ,SAAStC,QAAQ,CAAC;EACrCL,GAAG,GAAG,UAAU;AAClB;AAEA,OAAO,MAAM4C,GAAG,SAASvC,QAAQ,CAAC;EAChCL,GAAG,GAAG,KAAK;AACb;AAEA,OAAO,MAAM6C,IAAI,SAASxC,QAAQ,CAAC;EACjCL,GAAG,GAAG,MAAM;AACd;AAEA,OAAO,MAAM8C,aAAa,SAASzC,QAAQ,CAAC;EAC1CL,GAAG,GAAG,eAAe;AACvB;AAEA,OAAO,MAAM+C,MAAM,SAAS1C,QAAQ,CAAC;EACnCL,GAAG,GAAG,QAAQ;AAChB;AAEA,OAAO,MAAMgD,OAAO,SAAS3C,QAAQ,CAAC;EACpCL,GAAG,GAAG,SAAS;AACjB;AAEA,eAAeuC,GAAG","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}