{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { defaultExercises } from \"../data/defaultExercises\";\nconst EXERCISES_STORAGE_KEY = \"exercises\";\nconst EXERCISES_INITIALIZED_KEY = \"exercises_initialized\";\nexport const initializeExercises = async () => {\n  try {\n    const initialized = await AsyncStorage.getItem(EXERCISES_INITIALIZED_KEY);\n    if (!initialized) {\n      await AsyncStorage.setItem(EXERCISES_STORAGE_KEY, JSON.stringify(defaultExercises));\n      await AsyncStorage.setItem(EXERCISES_INITIALIZED_KEY, \"true\");\n    }\n  } catch (error) {\n    console.error(\"Error initializing exercises:\", error);\n  }\n};\nexport const getAllExercises = async () => {\n  try {\n    await initializeExercises();\n    const exercisesJson = await AsyncStorage.getItem(EXERCISES_STORAGE_KEY);\n    return exercisesJson ? JSON.parse(exercisesJson) : [];\n  } catch (error) {\n    console.error(\"Error retrieving exercises:\", error);\n    return [];\n  }\n};\nexport const getExerciseById = async id => {\n  const exercises = await getAllExercises();\n  return exercises.find(exercise => exercise.id === id) || null;\n};\nexport const getExercisesByMuscleGroup = async muscleGroup => {\n  const exercises = await getAllExercises();\n  return exercises.filter(exercise => exercise.primaryMuscleGroups.includes(muscleGroup) || exercise.secondaryMuscleGroups && exercise.secondaryMuscleGroups.includes(muscleGroup));\n};\nexport const getExercisesByEquipment = async equipment => {\n  const exercises = await getAllExercises();\n  return exercises.filter(exercise => exercise.equipment.includes(equipment));\n};\nexport const searchExercises = async searchTerm => {\n  const exercises = await getAllExercises();\n  const term = searchTerm.toLowerCase();\n  return exercises.filter(exercise => exercise.name.toLowerCase().includes(term));\n};\nexport const saveExercise = async exercise => {\n  try {\n    const exercises = await getAllExercises();\n    if (!exercise.id) {\n      exercise.id = uuidv4();\n      exercise.isCustom = true;\n    }\n    const existingIndex = exercises.findIndex(e => e.id === exercise.id);\n    if (existingIndex >= 0) {\n      exercises[existingIndex] = exercise;\n    } else {\n      exercises.push(exercise);\n    }\n    await AsyncStorage.setItem(EXERCISES_STORAGE_KEY, JSON.stringify(exercises));\n    return exercise;\n  } catch (error) {\n    console.error(\"Error saving exercise:\", error);\n    throw error;\n  }\n};\nexport const deleteExercise = async id => {\n  try {\n    const exercises = await getAllExercises();\n    const exercise = exercises.find(e => e.id === id);\n    if (exercise && !exercise.isCustom) {\n      return false;\n    }\n    const filteredExercises = exercises.filter(exercise => exercise.id !== id);\n    await AsyncStorage.setItem(EXERCISES_STORAGE_KEY, JSON.stringify(filteredExercises));\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting exercise:\", error);\n    return false;\n  }\n};\nexport const toggleExerciseBookmark = async id => {\n  try {\n    const exercises = await getAllExercises();\n    const exerciseIndex = exercises.findIndex(e => e.id === id);\n    if (exerciseIndex < 0) {\n      return null;\n    }\n    exercises[exerciseIndex].isBookmarked = !exercises[exerciseIndex].isBookmarked;\n    await AsyncStorage.setItem(EXERCISES_STORAGE_KEY, JSON.stringify(exercises));\n    return exercises[exerciseIndex];\n  } catch (error) {\n    console.error(\"Error toggling exercise bookmark:\", error);\n    return null;\n  }\n};\nexport const getBookmarkedExercises = async () => {\n  const exercises = await getAllExercises();\n  return exercises.filter(exercise => exercise.isBookmarked);\n};","map":{"version":3,"names":["AsyncStorage","v4","uuidv4","defaultExercises","EXERCISES_STORAGE_KEY","EXERCISES_INITIALIZED_KEY","initializeExercises","initialized","getItem","setItem","JSON","stringify","error","console","getAllExercises","exercisesJson","parse","getExerciseById","id","exercises","find","exercise","getExercisesByMuscleGroup","muscleGroup","filter","primaryMuscleGroups","includes","secondaryMuscleGroups","getExercisesByEquipment","equipment","searchExercises","searchTerm","term","toLowerCase","name","saveExercise","isCustom","existingIndex","findIndex","e","push","deleteExercise","filteredExercises","toggleExerciseBookmark","exerciseIndex","isBookmarked","getBookmarkedExercises"],"sources":["/Users/recep/Gym/services/exerciseService.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport type { Exercise, MuscleGroup, EquipmentType } from \"../models/Exercise\"\nimport { defaultExercises } from \"../data/defaultExercises\"\n\n// Keys for AsyncStorage\nconst EXERCISES_STORAGE_KEY = \"exercises\"\nconst EXERCISES_INITIALIZED_KEY = \"exercises_initialized\"\n\n// Initialize default exercises if not already done\nexport const initializeExercises = async (): Promise<void> => {\n  try {\n    const initialized = await AsyncStorage.getItem(EXERCISES_INITIALIZED_KEY)\n\n    if (!initialized) {\n      await AsyncStorage.setItem(EXERCISES_STORAGE_KEY, JSON.stringify(defaultExercises))\n      await AsyncStorage.setItem(EXERCISES_INITIALIZED_KEY, \"true\")\n    }\n  } catch (error) {\n    console.error(\"Error initializing exercises:\", error)\n  }\n}\n\n// Get all exercises\nexport const getAllExercises = async (): Promise<Exercise[]> => {\n  try {\n    // Ensure exercises are initialized\n    await initializeExercises()\n\n    const exercisesJson = await AsyncStorage.getItem(EXERCISES_STORAGE_KEY)\n    return exercisesJson ? JSON.parse(exercisesJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving exercises:\", error)\n    return []\n  }\n}\n\n// Get exercise by ID\nexport const getExerciseById = async (id: string): Promise<Exercise | null> => {\n  const exercises = await getAllExercises()\n  return exercises.find((exercise) => exercise.id === id) || null\n}\n\n// Get exercises by muscle group\nexport const getExercisesByMuscleGroup = async (muscleGroup: MuscleGroup): Promise<Exercise[]> => {\n  const exercises = await getAllExercises()\n  return exercises.filter(\n    (exercise) =>\n      exercise.primaryMuscleGroups.includes(muscleGroup) ||\n      (exercise.secondaryMuscleGroups && exercise.secondaryMuscleGroups.includes(muscleGroup)),\n  )\n}\n\n// Get exercises by equipment type\nexport const getExercisesByEquipment = async (equipment: EquipmentType): Promise<Exercise[]> => {\n  const exercises = await getAllExercises()\n  return exercises.filter((exercise) => exercise.equipment.includes(equipment))\n}\n\n// Search exercises by name\nexport const searchExercises = async (searchTerm: string): Promise<Exercise[]> => {\n  const exercises = await getAllExercises()\n  const term = searchTerm.toLowerCase()\n  return exercises.filter((exercise) => exercise.name.toLowerCase().includes(term))\n}\n\n// Save an exercise (create or update)\nexport const saveExercise = async (exercise: Exercise): Promise<Exercise> => {\n  try {\n    const exercises = await getAllExercises()\n\n    // If exercise has no ID, create a new one\n    if (!exercise.id) {\n      exercise.id = uuidv4()\n      exercise.isCustom = true // Mark as custom exercise\n    }\n\n    // Find if exercise already exists to update or add new\n    const existingIndex = exercises.findIndex((e) => e.id === exercise.id)\n\n    if (existingIndex >= 0) {\n      exercises[existingIndex] = exercise\n    } else {\n      exercises.push(exercise)\n    }\n\n    await AsyncStorage.setItem(EXERCISES_STORAGE_KEY, JSON.stringify(exercises))\n    return exercise\n  } catch (error) {\n    console.error(\"Error saving exercise:\", error)\n    throw error\n  }\n}\n\n// Delete an exercise\nexport const deleteExercise = async (id: string): Promise<boolean> => {\n  try {\n    const exercises = await getAllExercises()\n    const exercise = exercises.find((e) => e.id === id)\n\n    // Don't allow deletion of default exercises\n    if (exercise && !exercise.isCustom) {\n      return false\n    }\n\n    const filteredExercises = exercises.filter((exercise) => exercise.id !== id)\n    await AsyncStorage.setItem(EXERCISES_STORAGE_KEY, JSON.stringify(filteredExercises))\n    return true\n  } catch (error) {\n    console.error(\"Error deleting exercise:\", error)\n    return false\n  }\n}\n\n// Toggle bookmark status for an exercise\nexport const toggleExerciseBookmark = async (id: string): Promise<Exercise | null> => {\n  try {\n    const exercises = await getAllExercises()\n    const exerciseIndex = exercises.findIndex((e) => e.id === id)\n\n    if (exerciseIndex < 0) {\n      return null\n    }\n\n    exercises[exerciseIndex].isBookmarked = !exercises[exerciseIndex].isBookmarked\n\n    await AsyncStorage.setItem(EXERCISES_STORAGE_KEY, JSON.stringify(exercises))\n    return exercises[exerciseIndex]\n  } catch (error) {\n    console.error(\"Error toggling exercise bookmark:\", error)\n    return null\n  }\n}\n\n// Get bookmarked exercises\nexport const getBookmarkedExercises = async (): Promise<Exercise[]> => {\n  const exercises = await getAllExercises()\n  return exercises.filter((exercise) => exercise.isBookmarked)\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}