{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst GOALS_STORAGE_KEY = \"goals\";\nconst GOAL_PROGRESS_STORAGE_KEY = \"goal_progress\";\nexport const getAllGoals = async () => {\n  try {\n    const goalsJson = await AsyncStorage.getItem(GOALS_STORAGE_KEY);\n    return goalsJson ? JSON.parse(goalsJson) : [];\n  } catch (error) {\n    console.error(\"Error retrieving goals:\", error);\n    return [];\n  }\n};\nexport const getGoalsByStatus = async status => {\n  const goals = await getAllGoals();\n  return goals.filter(goal => goal.status === status);\n};\nexport const getGoalsByType = async type => {\n  const goals = await getAllGoals();\n  return goals.filter(goal => goal.type === type);\n};\nexport const getGoalById = async id => {\n  const goals = await getAllGoals();\n  return goals.find(goal => goal.id === id) || null;\n};\nexport const saveGoal = async goal => {\n  try {\n    const goals = await getAllGoals();\n    if (!goal.id) {\n      goal.id = uuidv4();\n    }\n    const existingIndex = goals.findIndex(g => g.id === goal.id);\n    if (existingIndex >= 0) {\n      goals[existingIndex] = goal;\n    } else {\n      goals.push(goal);\n    }\n    await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals));\n    return goal;\n  } catch (error) {\n    console.error(\"Error saving goal:\", error);\n    throw error;\n  }\n};\nexport const deleteGoal = async id => {\n  try {\n    const goals = await getAllGoals();\n    const filteredGoals = goals.filter(goal => goal.id !== id);\n    await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(filteredGoals));\n    await deleteGoalProgress(id);\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting goal:\", error);\n    return false;\n  }\n};\nexport const updateGoalStatus = async (id, status) => {\n  try {\n    const goals = await getAllGoals();\n    const goalIndex = goals.findIndex(g => g.id === id);\n    if (goalIndex >= 0) {\n      goals[goalIndex].status = status;\n      goals[goalIndex].lastUpdated = new Date();\n      await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals));\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error(\"Error updating goal status:\", error);\n    return false;\n  }\n};\nexport const updateGoalProgress = async (id, value) => {\n  try {\n    const goals = await getAllGoals();\n    const goalIndex = goals.findIndex(g => g.id === id);\n    if (goalIndex >= 0) {\n      const goal = goals[goalIndex];\n      goal.currentValue = value;\n      goal.lastUpdated = new Date();\n      if (goal.type === \"body_measurement\" && goal.measurementType === \"weight\") {\n        if (value <= goal.targetValue) {\n          goal.status = \"completed\";\n        }\n      } else {\n        if (value >= goal.targetValue) {\n          goal.status = \"completed\";\n        }\n      }\n      await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals));\n      await addGoalProgressPoint(id, value);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error(\"Error updating goal progress:\", error);\n    return false;\n  }\n};\nexport const getGoalProgress = async goalId => {\n  try {\n    const progressJson = await AsyncStorage.getItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`);\n    return progressJson ? JSON.parse(progressJson) : [];\n  } catch (error) {\n    console.error(\"Error retrieving goal progress:\", error);\n    return [];\n  }\n};\nexport const addGoalProgressPoint = async (goalId, value) => {\n  try {\n    const progress = await getGoalProgress(goalId);\n    const newPoint = {\n      date: new Date(),\n      value\n    };\n    progress.push(newPoint);\n    await AsyncStorage.setItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`, JSON.stringify(progress));\n    return true;\n  } catch (error) {\n    console.error(\"Error adding goal progress point:\", error);\n    return false;\n  }\n};\nexport const deleteGoalProgress = async goalId => {\n  try {\n    await AsyncStorage.removeItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`);\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting goal progress:\", error);\n    return false;\n  }\n};\nexport const updateWorkoutFrequencyGoals = async () => {\n  try {\n    const goals = await getGoalsByType(\"workout_frequency\");\n    const activeGoals = goals.filter(goal => goal.status === \"active\");\n    if (activeGoals.length === 0) return;\n    const now = new Date();\n    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const workouts = await AsyncStorage.getItem(\"workouts\");\n    const parsedWorkouts = workouts ? JSON.parse(workouts) : [];\n    const recentWorkouts = parsedWorkouts.filter(workout => {\n      const workoutDate = new Date(workout.date);\n      return workoutDate >= oneWeekAgo && workoutDate <= now && workout.isCompleted;\n    });\n    const workoutCount = recentWorkouts.length;\n    for (const goal of activeGoals) {\n      await updateGoalProgress(goal.id, workoutCount);\n    }\n  } catch (error) {\n    console.error(\"Error updating workout frequency goals:\", error);\n  }\n};","map":{"version":3,"names":["AsyncStorage","v4","uuidv4","GOALS_STORAGE_KEY","GOAL_PROGRESS_STORAGE_KEY","getAllGoals","goalsJson","getItem","JSON","parse","error","console","getGoalsByStatus","status","goals","filter","goal","getGoalsByType","type","getGoalById","id","find","saveGoal","existingIndex","findIndex","g","push","setItem","stringify","deleteGoal","filteredGoals","deleteGoalProgress","updateGoalStatus","goalIndex","lastUpdated","Date","updateGoalProgress","value","currentValue","measurementType","targetValue","addGoalProgressPoint","getGoalProgress","goalId","progressJson","progress","newPoint","date","removeItem","updateWorkoutFrequencyGoals","activeGoals","length","now","oneWeekAgo","getTime","workouts","parsedWorkouts","recentWorkouts","workout","workoutDate","isCompleted","workoutCount"],"sources":["/Users/recep/Gym/services/goalService.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport type { Goal, GoalProgress, GoalType, GoalStatus } from \"../models/Goal\"\n\n// Keys for AsyncStorage\nconst GOALS_STORAGE_KEY = \"goals\"\nconst GOAL_PROGRESS_STORAGE_KEY = \"goal_progress\"\n\n// Get all goals\nexport const getAllGoals = async (): Promise<Goal[]> => {\n  try {\n    const goalsJson = await AsyncStorage.getItem(GOALS_STORAGE_KEY)\n    return goalsJson ? JSON.parse(goalsJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving goals:\", error)\n    return []\n  }\n}\n\n// Get goals by status\nexport const getGoalsByStatus = async (status: GoalStatus): Promise<Goal[]> => {\n  const goals = await getAllGoals()\n  return goals.filter((goal) => goal.status === status)\n}\n\n// Get goals by type\nexport const getGoalsByType = async (type: GoalType): Promise<Goal[]> => {\n  const goals = await getAllGoals()\n  return goals.filter((goal) => goal.type === type)\n}\n\n// Get goal by ID\nexport const getGoalById = async (id: string): Promise<Goal | null> => {\n  const goals = await getAllGoals()\n  return goals.find((goal) => goal.id === id) || null\n}\n\n// Save a goal\nexport const saveGoal = async (goal: Goal): Promise<Goal> => {\n  try {\n    const goals = await getAllGoals()\n\n    // If goal has no ID, create a new one\n    if (!goal.id) {\n      goal.id = uuidv4()\n    }\n\n    // Find if goal already exists to update or add new\n    const existingIndex = goals.findIndex((g) => g.id === goal.id)\n\n    if (existingIndex >= 0) {\n      goals[existingIndex] = goal\n    } else {\n      goals.push(goal)\n    }\n\n    await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals))\n    return goal\n  } catch (error) {\n    console.error(\"Error saving goal:\", error)\n    throw error\n  }\n}\n\n// Delete a goal\nexport const deleteGoal = async (id: string): Promise<boolean> => {\n  try {\n    const goals = await getAllGoals()\n    const filteredGoals = goals.filter((goal) => goal.id !== id)\n    await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(filteredGoals))\n\n    // Also delete goal progress\n    await deleteGoalProgress(id)\n\n    return true\n  } catch (error) {\n    console.error(\"Error deleting goal:\", error)\n    return false\n  }\n}\n\n// Update goal status\nexport const updateGoalStatus = async (id: string, status: GoalStatus): Promise<boolean> => {\n  try {\n    const goals = await getAllGoals()\n    const goalIndex = goals.findIndex((g) => g.id === id)\n\n    if (goalIndex >= 0) {\n      goals[goalIndex].status = status\n      goals[goalIndex].lastUpdated = new Date()\n      await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals))\n      return true\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error updating goal status:\", error)\n    return false\n  }\n}\n\n// Update goal progress\nexport const updateGoalProgress = async (id: string, value: number): Promise<boolean> => {\n  try {\n    const goals = await getAllGoals()\n    const goalIndex = goals.findIndex((g) => g.id === id)\n\n    if (goalIndex >= 0) {\n      const goal = goals[goalIndex]\n      goal.currentValue = value\n      goal.lastUpdated = new Date()\n\n      // Check if goal is completed\n      if (goal.type === \"body_measurement\" && goal.measurementType === \"weight\") {\n        // For weight goals, we want to decrease\n        if (value <= goal.targetValue) {\n          goal.status = \"completed\"\n        }\n      } else {\n        // For other goals, we want to increase\n        if (value >= goal.targetValue) {\n          goal.status = \"completed\"\n        }\n      }\n\n      await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals))\n\n      // Add progress point\n      await addGoalProgressPoint(id, value)\n\n      return true\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error updating goal progress:\", error)\n    return false\n  }\n}\n\n// Get goal progress\nexport const getGoalProgress = async (goalId: string): Promise<GoalProgress[]> => {\n  try {\n    const progressJson = await AsyncStorage.getItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`)\n    return progressJson ? JSON.parse(progressJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving goal progress:\", error)\n    return []\n  }\n}\n\n// Add goal progress point\nexport const addGoalProgressPoint = async (goalId: string, value: number): Promise<boolean> => {\n  try {\n    const progress = await getGoalProgress(goalId)\n\n    const newPoint: GoalProgress = {\n      date: new Date(),\n      value,\n    }\n\n    progress.push(newPoint)\n    await AsyncStorage.setItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`, JSON.stringify(progress))\n\n    return true\n  } catch (error) {\n    console.error(\"Error adding goal progress point:\", error)\n    return false\n  }\n}\n\n// Delete goal progress\nexport const deleteGoalProgress = async (goalId: string): Promise<boolean> => {\n  try {\n    await AsyncStorage.removeItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`)\n    return true\n  } catch (error) {\n    console.error(\"Error deleting goal progress:\", error)\n    return false\n  }\n}\n\n// Check and update workout frequency goals\nexport const updateWorkoutFrequencyGoals = async (): Promise<void> => {\n  try {\n    const goals = await getGoalsByType(\"workout_frequency\")\n    const activeGoals = goals.filter((goal) => goal.status === \"active\")\n\n    if (activeGoals.length === 0) return\n\n    // Get workouts from the past week\n    const now = new Date()\n    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\n\n    // This would be replaced with actual workout service call\n    const workouts = await AsyncStorage.getItem(\"workouts\")\n    const parsedWorkouts = workouts ? JSON.parse(workouts) : []\n\n    const recentWorkouts = parsedWorkouts.filter((workout: any) => {\n      const workoutDate = new Date(workout.date)\n      return workoutDate >= oneWeekAgo && workoutDate <= now && workout.isCompleted\n    })\n\n    const workoutCount = recentWorkouts.length\n\n    // Update each active workout frequency goal\n    for (const goal of activeGoals) {\n      await updateGoalProgress(goal.id, workoutCount)\n    }\n  } catch (error) {\n    console.error(\"Error updating workout frequency goals:\", error)\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}