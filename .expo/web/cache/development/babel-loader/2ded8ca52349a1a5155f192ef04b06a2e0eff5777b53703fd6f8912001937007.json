{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst MEASUREMENTS_STORAGE_KEY = \"measurements\";\nconst MEASUREMENT_GOALS_STORAGE_KEY = \"measurement_goals\";\nexport const getAllMeasurements = async () => {\n  try {\n    const measurementsJson = await AsyncStorage.getItem(MEASUREMENTS_STORAGE_KEY);\n    return measurementsJson ? JSON.parse(measurementsJson) : [];\n  } catch (error) {\n    console.error(\"Error retrieving measurements:\", error);\n    return [];\n  }\n};\nexport const getMeasurementsByType = async type => {\n  const measurements = await getAllMeasurements();\n  return measurements.filter(measurement => measurement.type === type).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\nexport const getLatestMeasurementByType = async type => {\n  const measurements = await getMeasurementsByType(type);\n  return measurements.length > 0 ? measurements[0] : null;\n};\nexport const getMeasurementsInDateRange = async (startDate, endDate) => {\n  const measurements = await getAllMeasurements();\n  return measurements.filter(measurement => {\n    const measurementDate = new Date(measurement.date);\n    return measurementDate >= startDate && measurementDate <= endDate;\n  });\n};\nexport const saveMeasurement = async measurement => {\n  try {\n    const measurements = await getAllMeasurements();\n    if (!measurement.id) {\n      measurement.id = uuidv4();\n    }\n    const existingIndex = measurements.findIndex(m => m.id === measurement.id);\n    if (existingIndex >= 0) {\n      measurements[existingIndex] = measurement;\n    } else {\n      measurements.push(measurement);\n    }\n    await AsyncStorage.setItem(MEASUREMENTS_STORAGE_KEY, JSON.stringify(measurements));\n    return measurement;\n  } catch (error) {\n    console.error(\"Error saving measurement:\", error);\n    throw error;\n  }\n};\nexport const deleteMeasurement = async id => {\n  try {\n    const measurements = await getAllMeasurements();\n    const filteredMeasurements = measurements.filter(measurement => measurement.id !== id);\n    await AsyncStorage.setItem(MEASUREMENTS_STORAGE_KEY, JSON.stringify(filteredMeasurements));\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting measurement:\", error);\n    return false;\n  }\n};\nexport const getAllMeasurementGoals = async () => {\n  try {\n    const goalsJson = await AsyncStorage.getItem(MEASUREMENT_GOALS_STORAGE_KEY);\n    return goalsJson ? JSON.parse(goalsJson) : [];\n  } catch (error) {\n    console.error(\"Error retrieving measurement goals:\", error);\n    return [];\n  }\n};\nexport const getMeasurementGoalsByType = async type => {\n  const goals = await getAllMeasurementGoals();\n  return goals.filter(goal => goal.measurementType === type).sort((a, b) => new Date(a.targetDate).getTime() - new Date(b.targetDate).getTime());\n};\nexport const saveMeasurementGoal = async goal => {\n  try {\n    const goals = await getAllMeasurementGoals();\n    if (!goal.id) {\n      goal.id = uuidv4();\n    }\n    const existingIndex = goals.findIndex(g => g.id === goal.id);\n    if (existingIndex >= 0) {\n      goals[existingIndex] = goal;\n    } else {\n      goals.push(goal);\n    }\n    await AsyncStorage.setItem(MEASUREMENT_GOALS_STORAGE_KEY, JSON.stringify(goals));\n    return goal;\n  } catch (error) {\n    console.error(\"Error saving measurement goal:\", error);\n    throw error;\n  }\n};\nexport const deleteMeasurementGoal = async id => {\n  try {\n    const goals = await getAllMeasurementGoals();\n    const filteredGoals = goals.filter(goal => goal.id !== id);\n    await AsyncStorage.setItem(MEASUREMENT_GOALS_STORAGE_KEY, JSON.stringify(filteredGoals));\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting measurement goal:\", error);\n    return false;\n  }\n};\nexport const checkGoalCompletion = async goalId => {\n  try {\n    const goals = await getAllMeasurementGoals();\n    const goal = goals.find(g => g.id === goalId);\n    if (!goal) {\n      return false;\n    }\n    const latestMeasurement = await getLatestMeasurementByType(goal.measurementType);\n    if (!latestMeasurement) {\n      return false;\n    }\n    if (goal.measurementType === \"weight\" || goal.measurementType === \"bodyFat\") {\n      if (latestMeasurement.value <= goal.targetValue) {\n        goal.completed = true;\n        await saveMeasurementGoal(goal);\n        return true;\n      }\n    } else {\n      if (latestMeasurement.value >= goal.targetValue) {\n        goal.completed = true;\n        await saveMeasurementGoal(goal);\n        return true;\n      }\n    }\n    return false;\n  } catch (error) {\n    console.error(\"Error checking goal completion:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["AsyncStorage","v4","uuidv4","MEASUREMENTS_STORAGE_KEY","MEASUREMENT_GOALS_STORAGE_KEY","getAllMeasurements","measurementsJson","getItem","JSON","parse","error","console","getMeasurementsByType","type","measurements","filter","measurement","sort","a","b","Date","date","getTime","getLatestMeasurementByType","length","getMeasurementsInDateRange","startDate","endDate","measurementDate","saveMeasurement","id","existingIndex","findIndex","m","push","setItem","stringify","deleteMeasurement","filteredMeasurements","getAllMeasurementGoals","goalsJson","getMeasurementGoalsByType","goals","goal","measurementType","targetDate","saveMeasurementGoal","g","deleteMeasurementGoal","filteredGoals","checkGoalCompletion","goalId","find","latestMeasurement","value","targetValue","completed"],"sources":["/Users/recep/Gym/services/measurementService.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport type { Measurement, MeasurementGoal, MeasurementType } from \"../models/Measurement\"\n\n// Keys for AsyncStorage\nconst MEASUREMENTS_STORAGE_KEY = \"measurements\"\nconst MEASUREMENT_GOALS_STORAGE_KEY = \"measurement_goals\"\n\n// Get all measurements\nexport const getAllMeasurements = async (): Promise<Measurement[]> => {\n  try {\n    const measurementsJson = await AsyncStorage.getItem(MEASUREMENTS_STORAGE_KEY)\n    return measurementsJson ? JSON.parse(measurementsJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving measurements:\", error)\n    return []\n  }\n}\n\n// Get measurements by type\nexport const getMeasurementsByType = async (type: MeasurementType): Promise<Measurement[]> => {\n  const measurements = await getAllMeasurements()\n  return measurements\n    .filter((measurement) => measurement.type === type)\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n}\n\n// Get latest measurement by type\nexport const getLatestMeasurementByType = async (type: MeasurementType): Promise<Measurement | null> => {\n  const measurements = await getMeasurementsByType(type)\n  return measurements.length > 0 ? measurements[0] : null\n}\n\n// Get measurements in date range\nexport const getMeasurementsInDateRange = async (startDate: Date, endDate: Date): Promise<Measurement[]> => {\n  const measurements = await getAllMeasurements()\n  return measurements.filter((measurement) => {\n    const measurementDate = new Date(measurement.date)\n    return measurementDate >= startDate && measurementDate <= endDate\n  })\n}\n\n// Save a measurement\nexport const saveMeasurement = async (measurement: Measurement): Promise<Measurement> => {\n  try {\n    const measurements = await getAllMeasurements()\n\n    // If measurement has no ID, create a new one\n    if (!measurement.id) {\n      measurement.id = uuidv4()\n    }\n\n    // Find if measurement already exists to update or add new\n    const existingIndex = measurements.findIndex((m) => m.id === measurement.id)\n\n    if (existingIndex >= 0) {\n      measurements[existingIndex] = measurement\n    } else {\n      measurements.push(measurement)\n    }\n\n    await AsyncStorage.setItem(MEASUREMENTS_STORAGE_KEY, JSON.stringify(measurements))\n    return measurement\n  } catch (error) {\n    console.error(\"Error saving measurement:\", error)\n    throw error\n  }\n}\n\n// Delete a measurement\nexport const deleteMeasurement = async (id: string): Promise<boolean> => {\n  try {\n    const measurements = await getAllMeasurements()\n    const filteredMeasurements = measurements.filter((measurement) => measurement.id !== id)\n    await AsyncStorage.setItem(MEASUREMENTS_STORAGE_KEY, JSON.stringify(filteredMeasurements))\n    return true\n  } catch (error) {\n    console.error(\"Error deleting measurement:\", error)\n    return false\n  }\n}\n\n// Get all measurement goals\nexport const getAllMeasurementGoals = async (): Promise<MeasurementGoal[]> => {\n  try {\n    const goalsJson = await AsyncStorage.getItem(MEASUREMENT_GOALS_STORAGE_KEY)\n    return goalsJson ? JSON.parse(goalsJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving measurement goals:\", error)\n    return []\n  }\n}\n\n// Get measurement goals by type\nexport const getMeasurementGoalsByType = async (type: MeasurementType): Promise<MeasurementGoal[]> => {\n  const goals = await getAllMeasurementGoals()\n  return goals\n    .filter((goal) => goal.measurementType === type)\n    .sort((a, b) => new Date(a.targetDate).getTime() - new Date(b.targetDate).getTime())\n}\n\n// Save a measurement goal\nexport const saveMeasurementGoal = async (goal: MeasurementGoal): Promise<MeasurementGoal> => {\n  try {\n    const goals = await getAllMeasurementGoals()\n\n    // If goal has no ID, create a new one\n    if (!goal.id) {\n      goal.id = uuidv4()\n    }\n\n    // Find if goal already exists to update or add new\n    const existingIndex = goals.findIndex((g) => g.id === goal.id)\n\n    if (existingIndex >= 0) {\n      goals[existingIndex] = goal\n    } else {\n      goals.push(goal)\n    }\n\n    await AsyncStorage.setItem(MEASUREMENT_GOALS_STORAGE_KEY, JSON.stringify(goals))\n    return goal\n  } catch (error) {\n    console.error(\"Error saving measurement goal:\", error)\n    throw error\n  }\n}\n\n// Delete a measurement goal\nexport const deleteMeasurementGoal = async (id: string): Promise<boolean> => {\n  try {\n    const goals = await getAllMeasurementGoals()\n    const filteredGoals = goals.filter((goal) => goal.id !== id)\n    await AsyncStorage.setItem(MEASUREMENT_GOALS_STORAGE_KEY, JSON.stringify(filteredGoals))\n    return true\n  } catch (error) {\n    console.error(\"Error deleting measurement goal:\", error)\n    return false\n  }\n}\n\n// Check if a goal is completed\nexport const checkGoalCompletion = async (goalId: string): Promise<boolean> => {\n  try {\n    const goals = await getAllMeasurementGoals()\n    const goal = goals.find((g) => g.id === goalId)\n\n    if (!goal) {\n      return false\n    }\n\n    const latestMeasurement = await getLatestMeasurementByType(goal.measurementType)\n\n    if (!latestMeasurement) {\n      return false\n    }\n\n    // Check if goal is reached based on the measurement type\n    // For weight and body fat, we want to decrease\n    if (goal.measurementType === \"weight\" || goal.measurementType === \"bodyFat\") {\n      if (latestMeasurement.value <= goal.targetValue) {\n        // Update goal as completed\n        goal.completed = true\n        await saveMeasurementGoal(goal)\n        return true\n      }\n    } else {\n      // For other measurements, we typically want to increase\n      if (latestMeasurement.value >= goal.targetValue) {\n        // Update goal as completed\n        goal.completed = true\n        await saveMeasurementGoal(goal)\n        return true\n      }\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error checking goal completion:\", error)\n    return false\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}