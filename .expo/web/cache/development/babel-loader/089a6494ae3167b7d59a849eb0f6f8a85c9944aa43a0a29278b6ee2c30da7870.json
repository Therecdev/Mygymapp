{"ast":null,"code":"import { EventEmitter, UnavailabilityError, Platform } from 'expo-modules-core';\nimport { ClipboardPasteButton } from './ClipboardPasteButton';\nimport ExpoClipboard from './ExpoClipboard';\nconst emitter = new EventEmitter(ExpoClipboard);\nconst onClipboardEventName = 'onClipboardChanged';\nexport async function getStringAsync(options = {}) {\n  if (!ExpoClipboard.getStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'getStringAsync');\n  }\n  return await ExpoClipboard.getStringAsync(options);\n}\nexport async function setStringAsync(text, options = {}) {\n  if (!ExpoClipboard.setStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'setStringAsync');\n  }\n  return ExpoClipboard.setStringAsync(text, options);\n}\nexport function setString(text) {\n  if (Platform.OS === 'web') {\n    return ExpoClipboard.setString(text);\n  } else {\n    setStringAsync(text);\n  }\n}\nexport function hasStringAsync() {\n  if (!ExpoClipboard.hasStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasStringAsync');\n  }\n  return ExpoClipboard.hasStringAsync();\n}\nexport async function getUrlAsync() {\n  if (!ExpoClipboard.getUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'getUrlAsync');\n  }\n  return await ExpoClipboard.getUrlAsync();\n}\nexport async function setUrlAsync(url) {\n  if (!ExpoClipboard.setUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'setUrlAsync');\n  }\n  return ExpoClipboard.setUrlAsync(url);\n}\nexport async function hasUrlAsync() {\n  if (!ExpoClipboard.hasUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasUrlAsync');\n  }\n  return await ExpoClipboard.hasUrlAsync();\n}\nexport async function getImageAsync(options) {\n  if (!ExpoClipboard.getImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'getImageAsync');\n  }\n  return await ExpoClipboard.getImageAsync(options);\n}\nexport async function setImageAsync(base64Image) {\n  if (!ExpoClipboard.setImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'setImageAsync');\n  }\n  return ExpoClipboard.setImageAsync(base64Image);\n}\nexport async function hasImageAsync() {\n  if (!ExpoClipboard.hasImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasImageAsync');\n  }\n  return ExpoClipboard.hasImageAsync();\n}\nexport function addClipboardListener(listener) {\n  const listenerWrapper = event => {\n    const wrappedEvent = Object.assign({}, event, {\n      get content() {\n        console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");\n        return '';\n      }\n    });\n    listener(wrappedEvent);\n  };\n  return emitter.addListener(onClipboardEventName, listenerWrapper);\n}\nexport function removeClipboardListener(subscription) {\n  emitter.removeSubscription(subscription);\n}\nexport const isPasteButtonAvailable = Platform.OS === 'ios' ? ExpoClipboard.isPasteButtonAvailable : false;\nexport * from './Clipboard.types';\nexport { ClipboardPasteButton };","map":{"version":3,"names":["EventEmitter","UnavailabilityError","Platform","ClipboardPasteButton","ExpoClipboard","emitter","onClipboardEventName","getStringAsync","options","setStringAsync","text","setString","OS","hasStringAsync","getUrlAsync","setUrlAsync","url","hasUrlAsync","getImageAsync","setImageAsync","base64Image","hasImageAsync","addClipboardListener","listener","listenerWrapper","event","wrappedEvent","Object","assign","content","console","warn","addListener","removeClipboardListener","subscription","removeSubscription","isPasteButtonAvailable"],"sources":["/Users/recep/Gym/node_modules/expo-clipboard/src/Clipboard.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport {\n  ClipboardImage,\n  ContentType,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n} from './Clipboard.types';\nimport { ClipboardPasteButton } from './ClipboardPasteButton';\nimport ExpoClipboard from './ExpoClipboard';\n\nconst emitter = new EventEmitter(ExpoClipboard);\n\nconst onClipboardEventName = 'onClipboardChanged';\n\ntype ClipboardEvent = {\n  /**\n   * @deprecated Returns empty string. Use [`getStringAsync()`](#getstringasyncoptions) instead to retrieve clipboard content.\n   */\n  content: string;\n  /**\n   * An array of content types that are available on the clipboard.\n   */\n  contentTypes: ContentType[];\n};\n\nexport { Subscription, ClipboardEvent };\n\n/**\n * Gets the content of the user's clipboard. Please note that calling this method on web will prompt\n * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options Options for the clipboard content to be retrieved.\n * @returns A promise that resolves to the content of the clipboard.\n */\nexport async function getStringAsync(options: GetStringOptions = {}): Promise<string> {\n  if (!ExpoClipboard.getStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'getStringAsync');\n  }\n  return await ExpoClipboard.getStringAsync(options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n *\n * @param text The string to save to the clipboard.\n * @param options Options for the clipboard content to be set.\n * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n */\nexport async function setStringAsync(\n  text: string,\n  options: SetStringOptions = {}\n): Promise<boolean> {\n  if (!ExpoClipboard.setStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'setStringAsync');\n  }\n  return ExpoClipboard.setStringAsync(text, options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n *\n * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n * the user's clipboard. On iOS and Android, nothing is returned.\n */\nexport function setString(text: string): void {\n  if (Platform.OS === 'web') {\n    // on web, we need to return legacy method,\n    // because of different return type\n    return ExpoClipboard.setString(text);\n  } else {\n    setStringAsync(text);\n  }\n}\n\n/**\n * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n */\nexport function hasStringAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasStringAsync');\n  }\n  return ExpoClipboard.hasStringAsync();\n}\n\n/**\n * Gets the URL from the user's clipboard.\n *\n * @returns A promise that fulfills to the URL in the clipboard.\n * @platform ios\n */\nexport async function getUrlAsync(): Promise<string | null> {\n  if (!ExpoClipboard.getUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'getUrlAsync');\n  }\n  return await ExpoClipboard.getUrlAsync();\n}\n\n/**\n * Sets a URL in the user's clipboard.\n *\n * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n * clipboard contains a URL and behave accordingly.\n *\n * @param url The URL to save to the clipboard.\n * @platform ios\n */\nexport async function setUrlAsync(url: string): Promise<void> {\n  if (!ExpoClipboard.setUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'setUrlAsync');\n  }\n  return ExpoClipboard.setUrlAsync(url);\n}\n\n/**\n * Returns whether the clipboard has a URL content.\n *\n * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n * @platform ios\n */\nexport async function hasUrlAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasUrlAsync');\n  }\n  return await ExpoClipboard.hasUrlAsync();\n}\n\n/**\n * Gets the image from the user's clipboard and returns it in the specified format. Please note that calling\n * this method on web will prompt the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options A `GetImageOptions` object to specify the desired format of the image.\n * @returns If there was an image in the clipboard, the promise resolves to\n * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n * Otherwise, it resolves to `null`.\n *\n * @example\n * ```tsx\n * const img = await Clipboard.getImageAsync({ format: 'png' });\n * // ...\n * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n * ```\n */\nexport async function getImageAsync(options: GetImageOptions): Promise<ClipboardImage | null> {\n  if (!ExpoClipboard.getImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'getImageAsync');\n  }\n  return await ExpoClipboard.getImageAsync(options);\n}\n\n/**\n * Sets an image in the user's clipboard.\n *\n * @param base64Image Image encoded as a base64 string, without MIME type.\n *\n * @example\n * ```tsx\n * const result = await ImagePicker.launchImageLibraryAsync({\n *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n *   base64: true,\n * });\n * await Clipboard.setImageAsync(result.base64);\n * ```\n */\nexport async function setImageAsync(base64Image: string): Promise<void> {\n  if (!ExpoClipboard.setImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'setImageAsync');\n  }\n  return ExpoClipboard.setImageAsync(base64Image);\n}\n\n/**\n * Returns whether the clipboard has an image content.\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n */\nexport async function hasImageAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasImageAsync');\n  }\n  return ExpoClipboard.hasImageAsync();\n}\n\n/**\n * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n * is a no-op on Web.\n *\n * @param listener Callback to execute when listener is triggered. The callback is provided a\n * single argument that is an object containing information about clipboard contents.\n *\n * @example\n * ```typescript\n * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n *     Clipboard.getStringAsync().then(content => {\n *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n *     });\n *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n *     alert('Yay! Clipboard contains an image');\n *   }\n * });\n * ```\n */\nexport function addClipboardListener(listener: (event: ClipboardEvent) => void): Subscription {\n  // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n  const listenerWrapper = (event: ClipboardEvent) => {\n    const wrappedEvent: ClipboardEvent = {\n      ...event,\n      get content(): string {\n        console.warn(\n          \"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\"\n        );\n        return '';\n      },\n    };\n    listener(wrappedEvent);\n  };\n  return emitter.addListener<ClipboardEvent>(onClipboardEventName, listenerWrapper);\n}\n\n/**\n * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n *\n * @param subscription The subscription to remove (created by addClipboardListener).\n *\n * @example\n * ```typescript\n * const subscription = addClipboardListener(() => {\n *   alert('Copy pasta!');\n * });\n * removeClipboardListener(subscription);\n * ```\n */\nexport function removeClipboardListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\n/**\n * Property that determines if the `ClipboardPasteButton` is available.\n *\n * This requires the users device to be using at least iOS 16.\n *\n * `true` if the component is available, and `false` otherwise.\n */\nexport const isPasteButtonAvailable: boolean =\n  Platform.OS === 'ios' ? ExpoClipboard.isPasteButtonAvailable : false;\n\nexport * from './Clipboard.types';\nexport { ClipboardPasteButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}