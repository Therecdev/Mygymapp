{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nimport { saveWorkout } from \"./workoutService\";\nimport { saveExercise, getAllExercises } from \"./exerciseService\";\nimport * as FileSystem from \"expo-file-system\";\nimport * as DocumentPicker from \"expo-document-picker\";\nconst muscleGroupMap = {\n  chest: \"chest\",\n  back: \"back\",\n  shoulders: \"shoulders\",\n  biceps: \"biceps\",\n  triceps: \"triceps\",\n  forearms: \"forearms\",\n  quads: \"quadriceps\",\n  hamstrings: \"hamstrings\",\n  calves: \"calves\",\n  glutes: \"glutes\",\n  abs: \"abdominals\",\n  core: \"abdominals\",\n  obliques: \"obliques\",\n  traps: \"traps\",\n  lats: \"lats\",\n  pectorals: \"chest\",\n  latissimus: \"lats\",\n  deltoids: \"shoulders\",\n  \"biceps brachii\": \"biceps\",\n  \"triceps brachii\": \"triceps\",\n  \"quadriceps femoris\": \"quadriceps\",\n  \"gluteus maximus\": \"glutes\",\n  gastrocnemius: \"calves\",\n  \"rectus abdominis\": \"abdominals\",\n  pecs: \"chest\",\n  delts: \"shoulders\",\n  bis: \"biceps\",\n  tris: \"triceps\",\n  quads: \"quadriceps\",\n  hams: \"hamstrings\",\n  abs: \"abdominals\"\n};\nconst equipmentMap = {\n  barbell: \"barbell\",\n  dumbbell: \"dumbbell\",\n  kettlebell: \"kettlebell\",\n  machine: \"machine\",\n  cable: \"cable\",\n  bodyweight: \"bodyweight\",\n  band: \"resistance band\",\n  \"resistance band\": \"resistance band\",\n  \"smith machine\": \"machine\",\n  \"ez bar\": \"barbell\",\n  \"trap bar\": \"barbell\",\n  suspension: \"bodyweight\"\n};\nexport const pickFileToImport = async () => {\n  try {\n    const result = await DocumentPicker.getDocumentAsync({\n      type: [\"application/json\", \"text/csv\"],\n      copyToCacheDirectory: true\n    });\n    if (result.type === \"success\") {\n      return result.uri;\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error picking file:\", error);\n    return null;\n  }\n};\nconst readFileContent = async uri => {\n  try {\n    const content = await FileSystem.readAsStringAsync(uri);\n    return content;\n  } catch (error) {\n    console.error(\"Error reading file:\", error);\n    throw error;\n  }\n};\nexport const detectAppSource = async fileUri => {\n  try {\n    const content = await readFileContent(fileUri);\n    try {\n      const data = JSON.parse(content);\n      if (data.workouts && data.routines) {\n        return \"hevy\";\n      }\n      if (data.exportedFromApp === \"Strong\" || data.measurements && data.workouts) {\n        return \"strong\";\n      }\n    } catch (e) {}\n    if (content.includes(\"Liftin Workout History\") || content.includes(\"Date,Exercise,Set,Weight,Reps,RPE\")) {\n      return \"liftin\";\n    }\n    return \"unknown\";\n  } catch (error) {\n    console.error(\"Error detecting app source:\", error);\n    return \"unknown\";\n  }\n};\nexport const importFromHevy = async fileUri => {\n  try {\n    const content = await readFileContent(fileUri);\n    const data = JSON.parse(content);\n    const existingExercises = await getAllExercises();\n    const importedExercises = [];\n    const importedWorkouts = [];\n    if (data.exercises) {\n      for (const hevyExercise of data.exercises) {\n        const existingExercise = existingExercises.find(e => e.name.toLowerCase() === hevyExercise.name.toLowerCase());\n        if (!existingExercise) {\n          const primaryMuscleGroups = [];\n          const secondaryMuscleGroups = [];\n          if (hevyExercise.primaryMuscles) {\n            for (const muscle of hevyExercise.primaryMuscles) {\n              const mappedMuscle = muscleGroupMap[muscle.toLowerCase()];\n              if (mappedMuscle && !primaryMuscleGroups.includes(mappedMuscle)) {\n                primaryMuscleGroups.push(mappedMuscle);\n              }\n            }\n          }\n          if (hevyExercise.secondaryMuscles) {\n            for (const muscle of hevyExercise.secondaryMuscles) {\n              const mappedMuscle = muscleGroupMap[muscle.toLowerCase()];\n              if (mappedMuscle && !secondaryMuscleGroups.includes(mappedMuscle)) {\n                secondaryMuscleGroups.push(mappedMuscle);\n              }\n            }\n          }\n          const equipment = [];\n          if (hevyExercise.equipment) {\n            const mappedEquipment = equipmentMap[hevyExercise.equipment.toLowerCase()];\n            if (mappedEquipment && !equipment.includes(mappedEquipment)) {\n              equipment.push(mappedEquipment);\n            }\n          }\n          const newExercise = {\n            id: uuidv4(),\n            name: hevyExercise.name,\n            primaryMuscleGroups: primaryMuscleGroups.length > 0 ? primaryMuscleGroups : [\"chest\"],\n            secondaryMuscleGroups: secondaryMuscleGroups.length > 0 ? secondaryMuscleGroups : undefined,\n            equipment: equipment.length > 0 ? equipment : [\"barbell\"],\n            instructions: hevyExercise.instructions || \"No instructions available.\",\n            isCustom: false,\n            isBookmarked: false\n          };\n          await saveExercise(newExercise);\n          importedExercises.push(newExercise);\n          existingExercises.push(newExercise);\n        }\n      }\n    }\n    if (data.workouts) {\n      for (const hevyWorkout of data.workouts) {\n        const exerciseEntries = [];\n        if (hevyWorkout.exercises) {\n          for (const hevyExerciseEntry of hevyWorkout.exercises) {\n            let exercise = existingExercises.find(e => e.name.toLowerCase() === hevyExerciseEntry.name.toLowerCase());\n            if (!exercise) {\n              exercise = {\n                id: uuidv4(),\n                name: hevyExerciseEntry.name,\n                primaryMuscleGroups: [\"chest\"],\n                equipment: [\"barbell\"],\n                instructions: \"No instructions available.\",\n                isCustom: true,\n                isBookmarked: false\n              };\n              await saveExercise(exercise);\n              existingExercises.push(exercise);\n              importedExercises.push(exercise);\n            }\n            const sets = [];\n            if (hevyExerciseEntry.sets) {\n              for (const hevySet of hevyExerciseEntry.sets) {\n                sets.push({\n                  id: uuidv4(),\n                  reps: hevySet.reps || 0,\n                  weight: hevySet.weight || 0,\n                  rpe: hevySet.rpe,\n                  isCompleted: true,\n                  notes: hevySet.notes\n                });\n              }\n            }\n            exerciseEntries.push({\n              id: uuidv4(),\n              exerciseId: exercise.id,\n              exercise: exercise,\n              sets: sets,\n              notes: hevyExerciseEntry.notes\n            });\n          }\n        }\n        const workout = {\n          id: uuidv4(),\n          name: hevyWorkout.name || \"Imported Workout\",\n          date: new Date(hevyWorkout.startTime || Date.now()),\n          exercises: exerciseEntries,\n          duration: hevyWorkout.duration ? Math.floor(hevyWorkout.duration / 60) : undefined,\n          notes: hevyWorkout.notes,\n          isCompleted: true\n        };\n        await saveWorkout(workout);\n        importedWorkouts.push(workout);\n      }\n    }\n    return {\n      workouts: importedWorkouts,\n      exercises: importedExercises\n    };\n  } catch (error) {\n    console.error(\"Error importing from Hevy:\", error);\n    throw error;\n  }\n};\nexport const importFromStrong = async fileUri => {\n  try {\n    const content = await readFileContent(fileUri);\n    const data = JSON.parse(content);\n    const existingExercises = await getAllExercises();\n    const importedExercises = [];\n    const importedWorkouts = [];\n    if (data.exercises) {\n      for (const strongExercise of data.exercises) {\n        const existingExercise = existingExercises.find(e => e.name.toLowerCase() === strongExercise.name.toLowerCase());\n        if (!existingExercise) {\n          const primaryMuscleGroups = [];\n          const secondaryMuscleGroups = [];\n          if (strongExercise.primaryMuscles) {\n            for (const muscle of strongExercise.primaryMuscles) {\n              const mappedMuscle = muscleGroupMap[muscle.toLowerCase()];\n              if (mappedMuscle && !primaryMuscleGroups.includes(mappedMuscle)) {\n                primaryMuscleGroups.push(mappedMuscle);\n              }\n            }\n          }\n          if (strongExercise.secondaryMuscles) {\n            for (const muscle of strongExercise.secondaryMuscles) {\n              const mappedMuscle = muscleGroupMap[muscle.toLowerCase()];\n              if (mappedMuscle && !secondaryMuscleGroups.includes(mappedMuscle)) {\n                secondaryMuscleGroups.push(mappedMuscle);\n              }\n            }\n          }\n          const equipment = [];\n          if (strongExercise.equipment) {\n            const mappedEquipment = equipmentMap[strongExercise.equipment.toLowerCase()];\n            if (mappedEquipment && !equipment.includes(mappedEquipment)) {\n              equipment.push(mappedEquipment);\n            }\n          }\n          const newExercise = {\n            id: uuidv4(),\n            name: strongExercise.name,\n            primaryMuscleGroups: primaryMuscleGroups.length > 0 ? primaryMuscleGroups : [\"chest\"],\n            secondaryMuscleGroups: secondaryMuscleGroups.length > 0 ? secondaryMuscleGroups : undefined,\n            equipment: equipment.length > 0 ? equipment : [\"barbell\"],\n            instructions: strongExercise.notes || \"No instructions available.\",\n            isCustom: false,\n            isBookmarked: false\n          };\n          await saveExercise(newExercise);\n          importedExercises.push(newExercise);\n          existingExercises.push(newExercise);\n        }\n      }\n    }\n    if (data.workouts) {\n      for (const strongWorkout of data.workouts) {\n        const exerciseEntries = [];\n        if (strongWorkout.exercises) {\n          for (const strongExerciseEntry of strongWorkout.exercises) {\n            let exercise = existingExercises.find(e => e.name.toLowerCase() === strongExerciseEntry.name.toLowerCase());\n            if (!exercise) {\n              exercise = {\n                id: uuidv4(),\n                name: strongExerciseEntry.name,\n                primaryMuscleGroups: [\"chest\"],\n                equipment: [\"barbell\"],\n                instructions: \"No instructions available.\",\n                isCustom: true,\n                isBookmarked: false\n              };\n              await saveExercise(exercise);\n              existingExercises.push(exercise);\n              importedExercises.push(exercise);\n            }\n            const sets = [];\n            if (strongExerciseEntry.sets) {\n              for (const strongSet of strongExerciseEntry.sets) {\n                sets.push({\n                  id: uuidv4(),\n                  reps: strongSet.reps || 0,\n                  weight: strongSet.weight || 0,\n                  rpe: strongSet.rpe,\n                  isCompleted: true,\n                  notes: strongSet.notes\n                });\n              }\n            }\n            exerciseEntries.push({\n              id: uuidv4(),\n              exerciseId: exercise.id,\n              exercise: exercise,\n              sets: sets,\n              notes: strongExerciseEntry.notes\n            });\n          }\n        }\n        const workout = {\n          id: uuidv4(),\n          name: strongWorkout.name || \"Imported Workout\",\n          date: new Date(strongWorkout.date || Date.now()),\n          exercises: exerciseEntries,\n          duration: strongWorkout.duration,\n          notes: strongWorkout.notes,\n          isCompleted: true\n        };\n        await saveWorkout(workout);\n        importedWorkouts.push(workout);\n      }\n    }\n    return {\n      workouts: importedWorkouts,\n      exercises: importedExercises\n    };\n  } catch (error) {\n    console.error(\"Error importing from Strong:\", error);\n    throw error;\n  }\n};\nexport const importFromLiftin = async fileUri => {\n  try {\n    const content = await readFileContent(fileUri);\n    const lines = content.split(\"\\n\");\n    const existingExercises = await getAllExercises();\n    const importedExercises = [];\n    const importedWorkouts = {};\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n      const columns = line.split(\",\");\n      if (columns.length < 5) continue;\n      const date = columns[0];\n      const exerciseName = columns[1];\n      const setNumber = Number.parseInt(columns[2], 10);\n      const weight = Number.parseFloat(columns[3]);\n      const reps = Number.parseInt(columns[4], 10);\n      const rpe = columns.length > 5 ? Number.parseFloat(columns[5]) : undefined;\n      let exercise = existingExercises.find(e => e.name.toLowerCase() === exerciseName.toLowerCase());\n      if (!exercise) {\n        exercise = {\n          id: uuidv4(),\n          name: exerciseName,\n          primaryMuscleGroups: [\"chest\"],\n          equipment: [\"barbell\"],\n          instructions: \"No instructions available.\",\n          isCustom: true,\n          isBookmarked: false\n        };\n        await saveExercise(exercise);\n        existingExercises.push(exercise);\n        importedExercises.push(exercise);\n      }\n      if (!importedWorkouts[date]) {\n        importedWorkouts[date] = {\n          id: uuidv4(),\n          name: `Workout ${date}`,\n          date: new Date(date),\n          exercises: [],\n          isCompleted: true\n        };\n      }\n      let exerciseEntry = importedWorkouts[date].exercises.find(e => e.exerciseId === exercise.id);\n      if (!exerciseEntry) {\n        exerciseEntry = {\n          id: uuidv4(),\n          exerciseId: exercise.id,\n          exercise: exercise,\n          sets: []\n        };\n        importedWorkouts[date].exercises.push(exerciseEntry);\n      }\n      exerciseEntry.sets.push({\n        id: uuidv4(),\n        reps,\n        weight,\n        rpe,\n        isCompleted: true\n      });\n    }\n    const workouts = [];\n    for (const date in importedWorkouts) {\n      const workout = importedWorkouts[date];\n      await saveWorkout(workout);\n      workouts.push(workout);\n    }\n    return {\n      workouts,\n      exercises: importedExercises\n    };\n  } catch (error) {\n    console.error(\"Error importing from Liftin:\", error);\n    throw error;\n  }\n};\nexport const importFromFile = async fileUri => {\n  const source = await detectAppSource(fileUri);\n  switch (source) {\n    case \"hevy\":\n      const hevyResult = await importFromHevy(fileUri);\n      return Object.assign({}, hevyResult, {\n        source: \"Hevy\"\n      });\n    case \"strong\":\n      const strongResult = await importFromStrong(fileUri);\n      return Object.assign({}, strongResult, {\n        source: \"Strong\"\n      });\n    case \"liftin\":\n      const liftinResult = await importFromLiftin(fileUri);\n      return Object.assign({}, liftinResult, {\n        source: \"Liftin'\"\n      });\n    default:\n      throw new Error(\"Unsupported file format\");\n  }\n};","map":{"version":3,"names":["v4","uuidv4","saveWorkout","saveExercise","getAllExercises","FileSystem","DocumentPicker","muscleGroupMap","chest","back","shoulders","biceps","triceps","forearms","quads","hamstrings","calves","glutes","abs","core","obliques","traps","lats","pectorals","latissimus","deltoids","gastrocnemius","pecs","delts","bis","tris","hams","equipmentMap","barbell","dumbbell","kettlebell","machine","cable","bodyweight","band","suspension","pickFileToImport","result","getDocumentAsync","type","copyToCacheDirectory","uri","error","console","readFileContent","content","readAsStringAsync","detectAppSource","fileUri","data","JSON","parse","workouts","routines","exportedFromApp","measurements","e","includes","importFromHevy","existingExercises","importedExercises","importedWorkouts","exercises","hevyExercise","existingExercise","find","name","toLowerCase","primaryMuscleGroups","secondaryMuscleGroups","primaryMuscles","muscle","mappedMuscle","push","secondaryMuscles","equipment","mappedEquipment","newExercise","id","length","undefined","instructions","isCustom","isBookmarked","hevyWorkout","exerciseEntries","hevyExerciseEntry","exercise","sets","hevySet","reps","weight","rpe","isCompleted","notes","exerciseId","workout","date","Date","startTime","now","duration","Math","floor","importFromStrong","strongExercise","strongWorkout","strongExerciseEntry","strongSet","importFromLiftin","lines","split","i","line","trim","columns","exerciseName","setNumber","Number","parseInt","parseFloat","exerciseEntry","importFromFile","source","hevyResult","Object","assign","strongResult","liftinResult","Error"],"sources":["/Users/recep/Gym/services/importService.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\"\nimport type { Workout, ExerciseEntry, WorkoutSet } from \"../models/Workout\"\nimport type { Exercise, MuscleGroup, EquipmentType } from \"../models/Exercise\"\nimport { saveWorkout } from \"./workoutService\"\nimport { saveExercise, getAllExercises } from \"./exerciseService\"\nimport * as FileSystem from \"expo-file-system\"\nimport * as DocumentPicker from \"expo-document-picker\"\n\n// Map muscle groups from other apps to our app's format\nconst muscleGroupMap: Record<string, MuscleGroup> = {\n  // Hevy mappings\n  chest: \"chest\",\n  back: \"back\",\n  shoulders: \"shoulders\",\n  biceps: \"biceps\",\n  triceps: \"triceps\",\n  forearms: \"forearms\",\n  quads: \"quadriceps\",\n  hamstrings: \"hamstrings\",\n  calves: \"calves\",\n  glutes: \"glutes\",\n  abs: \"abdominals\",\n  core: \"abdominals\",\n  obliques: \"obliques\",\n  traps: \"traps\",\n  lats: \"lats\",\n\n  // Strong mappings\n  pectorals: \"chest\",\n  latissimus: \"lats\",\n  deltoids: \"shoulders\",\n  \"biceps brachii\": \"biceps\",\n  \"triceps brachii\": \"triceps\",\n  \"quadriceps femoris\": \"quadriceps\",\n  \"gluteus maximus\": \"glutes\",\n  gastrocnemius: \"calves\",\n  \"rectus abdominis\": \"abdominals\",\n\n  // Liftin' mappings\n  pecs: \"chest\",\n  delts: \"shoulders\",\n  bis: \"biceps\",\n  tris: \"triceps\",\n  quads: \"quadriceps\",\n  hams: \"hamstrings\",\n  abs: \"abdominals\",\n}\n\n// Map equipment types from other apps to our app's format\nconst equipmentMap: Record<string, EquipmentType> = {\n  // Common mappings\n  barbell: \"barbell\",\n  dumbbell: \"dumbbell\",\n  kettlebell: \"kettlebell\",\n  machine: \"machine\",\n  cable: \"cable\",\n  bodyweight: \"bodyweight\",\n  band: \"resistance band\",\n  \"resistance band\": \"resistance band\",\n  \"smith machine\": \"machine\",\n  \"ez bar\": \"barbell\",\n  \"trap bar\": \"barbell\",\n  suspension: \"bodyweight\",\n}\n\n// Pick a file to import\nexport const pickFileToImport = async (): Promise<string | null> => {\n  try {\n    const result = await DocumentPicker.getDocumentAsync({\n      type: [\"application/json\", \"text/csv\"],\n      copyToCacheDirectory: true,\n    })\n\n    if (result.type === \"success\") {\n      return result.uri\n    }\n\n    return null\n  } catch (error) {\n    console.error(\"Error picking file:\", error)\n    return null\n  }\n}\n\n// Read file content\nconst readFileContent = async (uri: string): Promise<string> => {\n  try {\n    const content = await FileSystem.readAsStringAsync(uri)\n    return content\n  } catch (error) {\n    console.error(\"Error reading file:\", error)\n    throw error\n  }\n}\n\n// Detect which app the file is from\nexport const detectAppSource = async (fileUri: string): Promise<\"hevy\" | \"strong\" | \"liftin\" | \"unknown\"> => {\n  try {\n    const content = await readFileContent(fileUri)\n\n    // Try to parse as JSON first\n    try {\n      const data = JSON.parse(content)\n\n      // Check for Hevy-specific fields\n      if (data.workouts && data.routines) {\n        return \"hevy\"\n      }\n\n      // Check for Strong-specific fields\n      if (data.exportedFromApp === \"Strong\" || (data.measurements && data.workouts)) {\n        return \"strong\"\n      }\n    } catch (e) {\n      // Not JSON, might be CSV\n    }\n\n    // Check for Liftin' CSV format\n    if (content.includes(\"Liftin Workout History\") || content.includes(\"Date,Exercise,Set,Weight,Reps,RPE\")) {\n      return \"liftin\"\n    }\n\n    return \"unknown\"\n  } catch (error) {\n    console.error(\"Error detecting app source:\", error)\n    return \"unknown\"\n  }\n}\n\n// Import from Hevy\nexport const importFromHevy = async (\n  fileUri: string,\n): Promise<{\n  workouts: Workout[]\n  exercises: Exercise[]\n}> => {\n  try {\n    const content = await readFileContent(fileUri)\n    const data = JSON.parse(content)\n\n    const existingExercises = await getAllExercises()\n    const importedExercises: Exercise[] = []\n    const importedWorkouts: Workout[] = []\n\n    // Process exercises\n    if (data.exercises) {\n      for (const hevyExercise of data.exercises) {\n        // Check if exercise already exists\n        const existingExercise = existingExercises.find((e) => e.name.toLowerCase() === hevyExercise.name.toLowerCase())\n\n        if (!existingExercise) {\n          // Map muscle groups\n          const primaryMuscleGroups: MuscleGroup[] = []\n          const secondaryMuscleGroups: MuscleGroup[] = []\n\n          if (hevyExercise.primaryMuscles) {\n            for (const muscle of hevyExercise.primaryMuscles) {\n              const mappedMuscle = muscleGroupMap[muscle.toLowerCase()]\n              if (mappedMuscle && !primaryMuscleGroups.includes(mappedMuscle)) {\n                primaryMuscleGroups.push(mappedMuscle)\n              }\n            }\n          }\n\n          if (hevyExercise.secondaryMuscles) {\n            for (const muscle of hevyExercise.secondaryMuscles) {\n              const mappedMuscle = muscleGroupMap[muscle.toLowerCase()]\n              if (mappedMuscle && !secondaryMuscleGroups.includes(mappedMuscle)) {\n                secondaryMuscleGroups.push(mappedMuscle)\n              }\n            }\n          }\n\n          // Map equipment\n          const equipment: EquipmentType[] = []\n          if (hevyExercise.equipment) {\n            const mappedEquipment = equipmentMap[hevyExercise.equipment.toLowerCase()]\n            if (mappedEquipment && !equipment.includes(mappedEquipment)) {\n              equipment.push(mappedEquipment)\n            }\n          }\n\n          // Create new exercise\n          const newExercise: Exercise = {\n            id: uuidv4(),\n            name: hevyExercise.name,\n            primaryMuscleGroups: primaryMuscleGroups.length > 0 ? primaryMuscleGroups : [\"chest\"], // Default to chest if no mapping\n            secondaryMuscleGroups: secondaryMuscleGroups.length > 0 ? secondaryMuscleGroups : undefined,\n            equipment: equipment.length > 0 ? equipment : [\"barbell\"], // Default to barbell if no mapping\n            instructions: hevyExercise.instructions || \"No instructions available.\",\n            isCustom: false,\n            isBookmarked: false,\n          }\n\n          await saveExercise(newExercise)\n          importedExercises.push(newExercise)\n          existingExercises.push(newExercise)\n        }\n      }\n    }\n\n    // Process workouts\n    if (data.workouts) {\n      for (const hevyWorkout of data.workouts) {\n        const exerciseEntries: ExerciseEntry[] = []\n\n        // Process workout exercises\n        if (hevyWorkout.exercises) {\n          for (const hevyExerciseEntry of hevyWorkout.exercises) {\n            // Find the corresponding exercise\n            let exercise = existingExercises.find((e) => e.name.toLowerCase() === hevyExerciseEntry.name.toLowerCase())\n\n            // If not found, create a placeholder\n            if (!exercise) {\n              exercise = {\n                id: uuidv4(),\n                name: hevyExerciseEntry.name,\n                primaryMuscleGroups: [\"chest\"], // Default\n                equipment: [\"barbell\"], // Default\n                instructions: \"No instructions available.\",\n                isCustom: true,\n                isBookmarked: false,\n              }\n\n              await saveExercise(exercise)\n              existingExercises.push(exercise)\n              importedExercises.push(exercise)\n            }\n\n            // Process sets\n            const sets: WorkoutSet[] = []\n            if (hevyExerciseEntry.sets) {\n              for (const hevySet of hevyExerciseEntry.sets) {\n                sets.push({\n                  id: uuidv4(),\n                  reps: hevySet.reps || 0,\n                  weight: hevySet.weight || 0,\n                  rpe: hevySet.rpe,\n                  isCompleted: true,\n                  notes: hevySet.notes,\n                })\n              }\n            }\n\n            // Create exercise entry\n            exerciseEntries.push({\n              id: uuidv4(),\n              exerciseId: exercise.id,\n              exercise: exercise,\n              sets: sets,\n              notes: hevyExerciseEntry.notes,\n            })\n          }\n        }\n\n        // Create workout\n        const workout: Workout = {\n          id: uuidv4(),\n          name: hevyWorkout.name || \"Imported Workout\",\n          date: new Date(hevyWorkout.startTime || Date.now()),\n          exercises: exerciseEntries,\n          duration: hevyWorkout.duration ? Math.floor(hevyWorkout.duration / 60) : undefined,\n          notes: hevyWorkout.notes,\n          isCompleted: true,\n        }\n\n        await saveWorkout(workout)\n        importedWorkouts.push(workout)\n      }\n    }\n\n    return {\n      workouts: importedWorkouts,\n      exercises: importedExercises,\n    }\n  } catch (error) {\n    console.error(\"Error importing from Hevy:\", error)\n    throw error\n  }\n}\n\n// Import from Strong\nexport const importFromStrong = async (\n  fileUri: string,\n): Promise<{\n  workouts: Workout[]\n  exercises: Exercise[]\n}> => {\n  try {\n    const content = await readFileContent(fileUri)\n    const data = JSON.parse(content)\n\n    const existingExercises = await getAllExercises()\n    const importedExercises: Exercise[] = []\n    const importedWorkouts: Workout[] = []\n\n    // Process exercises\n    if (data.exercises) {\n      for (const strongExercise of data.exercises) {\n        // Check if exercise already exists\n        const existingExercise = existingExercises.find(\n          (e) => e.name.toLowerCase() === strongExercise.name.toLowerCase(),\n        )\n\n        if (!existingExercise) {\n          // Map muscle groups\n          const primaryMuscleGroups: MuscleGroup[] = []\n          const secondaryMuscleGroups: MuscleGroup[] = []\n\n          if (strongExercise.primaryMuscles) {\n            for (const muscle of strongExercise.primaryMuscles) {\n              const mappedMuscle = muscleGroupMap[muscle.toLowerCase()]\n              if (mappedMuscle && !primaryMuscleGroups.includes(mappedMuscle)) {\n                primaryMuscleGroups.push(mappedMuscle)\n              }\n            }\n          }\n\n          if (strongExercise.secondaryMuscles) {\n            for (const muscle of strongExercise.secondaryMuscles) {\n              const mappedMuscle = muscleGroupMap[muscle.toLowerCase()]\n              if (mappedMuscle && !secondaryMuscleGroups.includes(mappedMuscle)) {\n                secondaryMuscleGroups.push(mappedMuscle)\n              }\n            }\n          }\n\n          // Map equipment\n          const equipment: EquipmentType[] = []\n          if (strongExercise.equipment) {\n            const mappedEquipment = equipmentMap[strongExercise.equipment.toLowerCase()]\n            if (mappedEquipment && !equipment.includes(mappedEquipment)) {\n              equipment.push(mappedEquipment)\n            }\n          }\n\n          // Create new exercise\n          const newExercise: Exercise = {\n            id: uuidv4(),\n            name: strongExercise.name,\n            primaryMuscleGroups: primaryMuscleGroups.length > 0 ? primaryMuscleGroups : [\"chest\"], // Default to chest if no mapping\n            secondaryMuscleGroups: secondaryMuscleGroups.length > 0 ? secondaryMuscleGroups : undefined,\n            equipment: equipment.length > 0 ? equipment : [\"barbell\"], // Default to barbell if no mapping\n            instructions: strongExercise.notes || \"No instructions available.\",\n            isCustom: false,\n            isBookmarked: false,\n          }\n\n          await saveExercise(newExercise)\n          importedExercises.push(newExercise)\n          existingExercises.push(newExercise)\n        }\n      }\n    }\n\n    // Process workouts\n    if (data.workouts) {\n      for (const strongWorkout of data.workouts) {\n        const exerciseEntries: ExerciseEntry[] = []\n\n        // Process workout exercises\n        if (strongWorkout.exercises) {\n          for (const strongExerciseEntry of strongWorkout.exercises) {\n            // Find the corresponding exercise\n            let exercise = existingExercises.find(\n              (e) => e.name.toLowerCase() === strongExerciseEntry.name.toLowerCase(),\n            )\n\n            // If not found, create a placeholder\n            if (!exercise) {\n              exercise = {\n                id: uuidv4(),\n                name: strongExerciseEntry.name,\n                primaryMuscleGroups: [\"chest\"], // Default\n                equipment: [\"barbell\"], // Default\n                instructions: \"No instructions available.\",\n                isCustom: true,\n                isBookmarked: false,\n              }\n\n              await saveExercise(exercise)\n              existingExercises.push(exercise)\n              importedExercises.push(exercise)\n            }\n\n            // Process sets\n            const sets: WorkoutSet[] = []\n            if (strongExerciseEntry.sets) {\n              for (const strongSet of strongExerciseEntry.sets) {\n                sets.push({\n                  id: uuidv4(),\n                  reps: strongSet.reps || 0,\n                  weight: strongSet.weight || 0,\n                  rpe: strongSet.rpe,\n                  isCompleted: true,\n                  notes: strongSet.notes,\n                })\n              }\n            }\n\n            // Create exercise entry\n            exerciseEntries.push({\n              id: uuidv4(),\n              exerciseId: exercise.id,\n              exercise: exercise,\n              sets: sets,\n              notes: strongExerciseEntry.notes,\n            })\n          }\n        }\n\n        // Create workout\n        const workout: Workout = {\n          id: uuidv4(),\n          name: strongWorkout.name || \"Imported Workout\",\n          date: new Date(strongWorkout.date || Date.now()),\n          exercises: exerciseEntries,\n          duration: strongWorkout.duration,\n          notes: strongWorkout.notes,\n          isCompleted: true,\n        }\n\n        await saveWorkout(workout)\n        importedWorkouts.push(workout)\n      }\n    }\n\n    return {\n      workouts: importedWorkouts,\n      exercises: importedExercises,\n    }\n  } catch (error) {\n    console.error(\"Error importing from Strong:\", error)\n    throw error\n  }\n}\n\n// Import from Liftin'\nexport const importFromLiftin = async (\n  fileUri: string,\n): Promise<{\n  workouts: Workout[]\n  exercises: Exercise[]\n}> => {\n  try {\n    const content = await readFileContent(fileUri)\n    const lines = content.split(\"\\n\")\n\n    const existingExercises = await getAllExercises()\n    const importedExercises: Exercise[] = []\n    const importedWorkouts: Record<string, Workout> = {}\n\n    // Skip header line\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim()\n      if (!line) continue\n\n      const columns = line.split(\",\")\n      if (columns.length < 5) continue\n\n      const date = columns[0]\n      const exerciseName = columns[1]\n      const setNumber = Number.parseInt(columns[2], 10)\n      const weight = Number.parseFloat(columns[3])\n      const reps = Number.parseInt(columns[4], 10)\n      const rpe = columns.length > 5 ? Number.parseFloat(columns[5]) : undefined\n\n      // Find or create exercise\n      let exercise = existingExercises.find((e) => e.name.toLowerCase() === exerciseName.toLowerCase())\n\n      if (!exercise) {\n        exercise = {\n          id: uuidv4(),\n          name: exerciseName,\n          primaryMuscleGroups: [\"chest\"], // Default\n          equipment: [\"barbell\"], // Default\n          instructions: \"No instructions available.\",\n          isCustom: true,\n          isBookmarked: false,\n        }\n\n        await saveExercise(exercise)\n        existingExercises.push(exercise)\n        importedExercises.push(exercise)\n      }\n\n      // Create or update workout\n      if (!importedWorkouts[date]) {\n        importedWorkouts[date] = {\n          id: uuidv4(),\n          name: `Workout ${date}`,\n          date: new Date(date),\n          exercises: [],\n          isCompleted: true,\n        }\n      }\n\n      // Find or create exercise entry\n      let exerciseEntry = importedWorkouts[date].exercises.find((e) => e.exerciseId === exercise!.id)\n\n      if (!exerciseEntry) {\n        exerciseEntry = {\n          id: uuidv4(),\n          exerciseId: exercise.id,\n          exercise: exercise,\n          sets: [],\n        }\n        importedWorkouts[date].exercises.push(exerciseEntry)\n      }\n\n      // Add set\n      exerciseEntry.sets.push({\n        id: uuidv4(),\n        reps,\n        weight,\n        rpe,\n        isCompleted: true,\n      })\n    }\n\n    // Save workouts\n    const workouts: Workout[] = []\n    for (const date in importedWorkouts) {\n      const workout = importedWorkouts[date]\n      await saveWorkout(workout)\n      workouts.push(workout)\n    }\n\n    return {\n      workouts,\n      exercises: importedExercises,\n    }\n  } catch (error) {\n    console.error(\"Error importing from Liftin:\", error)\n    throw error\n  }\n}\n\n// Main import function\nexport const importFromFile = async (\n  fileUri: string,\n): Promise<{\n  workouts: Workout[]\n  exercises: Exercise[]\n  source: string\n}> => {\n  const source = await detectAppSource(fileUri)\n\n  switch (source) {\n    case \"hevy\":\n      const hevyResult = await importFromHevy(fileUri)\n      return { ...hevyResult, source: \"Hevy\" }\n\n    case \"strong\":\n      const strongResult = await importFromStrong(fileUri)\n      return { ...strongResult, source: \"Strong\" }\n\n    case \"liftin\":\n      const liftinResult = await importFromLiftin(fileUri)\n      return { ...liftinResult, source: \"Liftin'\" }\n\n    default:\n      throw new Error(\"Unsupported file format\")\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}