{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst JOURNAL_STORAGE_KEY = \"journal_entries\";\nexport const getAllJournalEntries = async () => {\n  try {\n    const entriesJson = await AsyncStorage.getItem(JOURNAL_STORAGE_KEY);\n    return entriesJson ? JSON.parse(entriesJson) : [];\n  } catch (error) {\n    console.error(\"Error retrieving journal entries:\", error);\n    return [];\n  }\n};\nexport const getRecentJournalEntries = async limit => {\n  const entries = await getAllJournalEntries();\n  return entries.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, limit);\n};\nexport const getJournalEntryById = async id => {\n  const entries = await getAllJournalEntries();\n  return entries.find(entry => entry.id === id) || null;\n};\nexport const getJournalEntriesByWorkoutId = async workoutId => {\n  const entries = await getAllJournalEntries();\n  return entries.filter(entry => entry.workoutId === workoutId);\n};\nexport const saveJournalEntry = async entry => {\n  try {\n    const entries = await getAllJournalEntries();\n    if (!entry.id) {\n      entry.id = uuidv4();\n    }\n    const existingIndex = entries.findIndex(e => e.id === entry.id);\n    if (existingIndex >= 0) {\n      entries[existingIndex] = entry;\n    } else {\n      entries.push(entry);\n    }\n    await AsyncStorage.setItem(JOURNAL_STORAGE_KEY, JSON.stringify(entries));\n    return entry;\n  } catch (error) {\n    console.error(\"Error saving journal entry:\", error);\n    throw error;\n  }\n};\nexport const deleteJournalEntry = async id => {\n  try {\n    const entries = await getAllJournalEntries();\n    const filteredEntries = entries.filter(entry => entry.id !== id);\n    await AsyncStorage.setItem(JOURNAL_STORAGE_KEY, JSON.stringify(filteredEntries));\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting journal entry:\", error);\n    return false;\n  }\n};\nexport const searchJournalEntries = async searchTerm => {\n  const entries = await getAllJournalEntries();\n  const term = searchTerm.toLowerCase();\n  return entries.filter(entry => entry.content.toLowerCase().includes(term) || entry.tags.some(tag => tag.toLowerCase().includes(term)));\n};\nexport const getJournalEntriesByTag = async tag => {\n  const entries = await getAllJournalEntries();\n  return entries.filter(entry => entry.tags.includes(tag));\n};","map":{"version":3,"names":["AsyncStorage","v4","uuidv4","JOURNAL_STORAGE_KEY","getAllJournalEntries","entriesJson","getItem","JSON","parse","error","console","getRecentJournalEntries","limit","entries","sort","a","b","Date","date","getTime","slice","getJournalEntryById","id","find","entry","getJournalEntriesByWorkoutId","workoutId","filter","saveJournalEntry","existingIndex","findIndex","e","push","setItem","stringify","deleteJournalEntry","filteredEntries","searchJournalEntries","searchTerm","term","toLowerCase","content","includes","tags","some","tag","getJournalEntriesByTag"],"sources":["/Users/recep/Gym/services/journalService.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport type { JournalEntry, MoodTag } from \"../models/JournalEntry\"\n\n// Keys for AsyncStorage\nconst JOURNAL_STORAGE_KEY = \"journal_entries\"\n\n// Get all journal entries\nexport const getAllJournalEntries = async (): Promise<JournalEntry[]> => {\n  try {\n    const entriesJson = await AsyncStorage.getItem(JOURNAL_STORAGE_KEY)\n    return entriesJson ? JSON.parse(entriesJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving journal entries:\", error)\n    return []\n  }\n}\n\n// Get recent journal entries\nexport const getRecentJournalEntries = async (limit: number): Promise<JournalEntry[]> => {\n  const entries = await getAllJournalEntries()\n  return entries.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, limit)\n}\n\n// Get a journal entry by ID\nexport const getJournalEntryById = async (id: string): Promise<JournalEntry | null> => {\n  const entries = await getAllJournalEntries()\n  return entries.find((entry) => entry.id === id) || null\n}\n\n// Get journal entries by workout ID\nexport const getJournalEntriesByWorkoutId = async (workoutId: string): Promise<JournalEntry[]> => {\n  const entries = await getAllJournalEntries()\n  return entries.filter((entry) => entry.workoutId === workoutId)\n}\n\n// Save a journal entry\nexport const saveJournalEntry = async (entry: JournalEntry): Promise<JournalEntry> => {\n  try {\n    const entries = await getAllJournalEntries()\n\n    // If entry has no ID, create a new one\n    if (!entry.id) {\n      entry.id = uuidv4()\n    }\n\n    // Find if entry already exists to update or add new\n    const existingIndex = entries.findIndex((e) => e.id === entry.id)\n\n    if (existingIndex >= 0) {\n      entries[existingIndex] = entry\n    } else {\n      entries.push(entry)\n    }\n\n    await AsyncStorage.setItem(JOURNAL_STORAGE_KEY, JSON.stringify(entries))\n    return entry\n  } catch (error) {\n    console.error(\"Error saving journal entry:\", error)\n    throw error\n  }\n}\n\n// Delete a journal entry\nexport const deleteJournalEntry = async (id: string): Promise<boolean> => {\n  try {\n    const entries = await getAllJournalEntries()\n    const filteredEntries = entries.filter((entry) => entry.id !== id)\n    await AsyncStorage.setItem(JOURNAL_STORAGE_KEY, JSON.stringify(filteredEntries))\n    return true\n  } catch (error) {\n    console.error(\"Error deleting journal entry:\", error)\n    return false\n  }\n}\n\n// Search journal entries by content or tags\nexport const searchJournalEntries = async (searchTerm: string): Promise<JournalEntry[]> => {\n  const entries = await getAllJournalEntries()\n  const term = searchTerm.toLowerCase()\n  return entries.filter(\n    (entry) => entry.content.toLowerCase().includes(term) || entry.tags.some((tag) => tag.toLowerCase().includes(term)),\n  )\n}\n\n// Get journal entries by tag\nexport const getJournalEntriesByTag = async (tag: MoodTag): Promise<JournalEntry[]> => {\n  const entries = await getAllJournalEntries()\n  return entries.filter((entry) => entry.tags.includes(tag))\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}