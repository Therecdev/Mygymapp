{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { v4 as uuidv4 } from \"uuid\";\nvar GOALS_STORAGE_KEY = \"goals\";\nvar GOAL_PROGRESS_STORAGE_KEY = \"goal_progress\";\nexport var getAllGoals = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var goalsJson = yield AsyncStorage.getItem(GOALS_STORAGE_KEY);\n      return goalsJson ? JSON.parse(goalsJson) : [];\n    } catch (error) {\n      console.error(\"Error retrieving goals:\", error);\n      return [];\n    }\n  });\n  return function getAllGoals() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getGoalsByStatus = function () {\n  var _ref2 = _asyncToGenerator(function* (status) {\n    var goals = yield getAllGoals();\n    return goals.filter(function (goal) {\n      return goal.status === status;\n    });\n  });\n  return function getGoalsByStatus(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getGoalsByType = function () {\n  var _ref3 = _asyncToGenerator(function* (type) {\n    var goals = yield getAllGoals();\n    return goals.filter(function (goal) {\n      return goal.type === type;\n    });\n  });\n  return function getGoalsByType(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getGoalById = function () {\n  var _ref4 = _asyncToGenerator(function* (id) {\n    var goals = yield getAllGoals();\n    return goals.find(function (goal) {\n      return goal.id === id;\n    }) || null;\n  });\n  return function getGoalById(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var saveGoal = function () {\n  var _ref5 = _asyncToGenerator(function* (goal) {\n    try {\n      var goals = yield getAllGoals();\n      if (!goal.id) {\n        goal.id = uuidv4();\n      }\n      var existingIndex = goals.findIndex(function (g) {\n        return g.id === goal.id;\n      });\n      if (existingIndex >= 0) {\n        goals[existingIndex] = goal;\n      } else {\n        goals.push(goal);\n      }\n      yield AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals));\n      return goal;\n    } catch (error) {\n      console.error(\"Error saving goal:\", error);\n      throw error;\n    }\n  });\n  return function saveGoal(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var deleteGoal = function () {\n  var _ref6 = _asyncToGenerator(function* (id) {\n    try {\n      var goals = yield getAllGoals();\n      var filteredGoals = goals.filter(function (goal) {\n        return goal.id !== id;\n      });\n      yield AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(filteredGoals));\n      yield deleteGoalProgress(id);\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting goal:\", error);\n      return false;\n    }\n  });\n  return function deleteGoal(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var updateGoalStatus = function () {\n  var _ref7 = _asyncToGenerator(function* (id, status) {\n    try {\n      var goals = yield getAllGoals();\n      var goalIndex = goals.findIndex(function (g) {\n        return g.id === id;\n      });\n      if (goalIndex >= 0) {\n        goals[goalIndex].status = status;\n        goals[goalIndex].lastUpdated = new Date();\n        yield AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error updating goal status:\", error);\n      return false;\n    }\n  });\n  return function updateGoalStatus(_x6, _x7) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var updateGoalProgress = function () {\n  var _ref8 = _asyncToGenerator(function* (id, value) {\n    try {\n      var goals = yield getAllGoals();\n      var goalIndex = goals.findIndex(function (g) {\n        return g.id === id;\n      });\n      if (goalIndex >= 0) {\n        var goal = goals[goalIndex];\n        goal.currentValue = value;\n        goal.lastUpdated = new Date();\n        if (goal.type === \"body_measurement\" && goal.measurementType === \"weight\") {\n          if (value <= goal.targetValue) {\n            goal.status = \"completed\";\n          }\n        } else {\n          if (value >= goal.targetValue) {\n            goal.status = \"completed\";\n          }\n        }\n        yield AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals));\n        yield addGoalProgressPoint(id, value);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error updating goal progress:\", error);\n      return false;\n    }\n  });\n  return function updateGoalProgress(_x8, _x9) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var getGoalProgress = function () {\n  var _ref9 = _asyncToGenerator(function* (goalId) {\n    try {\n      var progressJson = yield AsyncStorage.getItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`);\n      return progressJson ? JSON.parse(progressJson) : [];\n    } catch (error) {\n      console.error(\"Error retrieving goal progress:\", error);\n      return [];\n    }\n  });\n  return function getGoalProgress(_x10) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var addGoalProgressPoint = function () {\n  var _ref10 = _asyncToGenerator(function* (goalId, value) {\n    try {\n      var progress = yield getGoalProgress(goalId);\n      var newPoint = {\n        date: new Date(),\n        value: value\n      };\n      progress.push(newPoint);\n      yield AsyncStorage.setItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`, JSON.stringify(progress));\n      return true;\n    } catch (error) {\n      console.error(\"Error adding goal progress point:\", error);\n      return false;\n    }\n  });\n  return function addGoalProgressPoint(_x11, _x12) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nexport var deleteGoalProgress = function () {\n  var _ref11 = _asyncToGenerator(function* (goalId) {\n    try {\n      yield AsyncStorage.removeItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`);\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting goal progress:\", error);\n      return false;\n    }\n  });\n  return function deleteGoalProgress(_x13) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nexport var updateWorkoutFrequencyGoals = function () {\n  var _ref12 = _asyncToGenerator(function* () {\n    try {\n      var goals = yield getGoalsByType(\"workout_frequency\");\n      var activeGoals = goals.filter(function (goal) {\n        return goal.status === \"active\";\n      });\n      if (activeGoals.length === 0) return;\n      var now = new Date();\n      var oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      var workouts = yield AsyncStorage.getItem(\"workouts\");\n      var parsedWorkouts = workouts ? JSON.parse(workouts) : [];\n      var recentWorkouts = parsedWorkouts.filter(function (workout) {\n        var workoutDate = new Date(workout.date);\n        return workoutDate >= oneWeekAgo && workoutDate <= now && workout.isCompleted;\n      });\n      var workoutCount = recentWorkouts.length;\n      for (var goal of activeGoals) {\n        yield updateGoalProgress(goal.id, workoutCount);\n      }\n    } catch (error) {\n      console.error(\"Error updating workout frequency goals:\", error);\n    }\n  });\n  return function updateWorkoutFrequencyGoals() {\n    return _ref12.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","v4","uuidv4","GOALS_STORAGE_KEY","GOAL_PROGRESS_STORAGE_KEY","getAllGoals","_ref","_asyncToGenerator","goalsJson","getItem","JSON","parse","error","console","apply","arguments","getGoalsByStatus","_ref2","status","goals","filter","goal","_x","getGoalsByType","_ref3","type","_x2","getGoalById","_ref4","id","find","_x3","saveGoal","_ref5","existingIndex","findIndex","g","push","setItem","stringify","_x4","deleteGoal","_ref6","filteredGoals","deleteGoalProgress","_x5","updateGoalStatus","_ref7","goalIndex","lastUpdated","Date","_x6","_x7","updateGoalProgress","_ref8","value","currentValue","measurementType","targetValue","addGoalProgressPoint","_x8","_x9","getGoalProgress","_ref9","goalId","progressJson","_x10","_ref10","progress","newPoint","date","_x11","_x12","_ref11","removeItem","_x13","updateWorkoutFrequencyGoals","_ref12","activeGoals","length","now","oneWeekAgo","getTime","workouts","parsedWorkouts","recentWorkouts","workout","workoutDate","isCompleted","workoutCount"],"sources":["/workspaces/Mygymapp/services/goalService.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport type { Goal, GoalProgress, GoalType, GoalStatus } from \"../models/Goal\"\n\n// Keys for AsyncStorage\nconst GOALS_STORAGE_KEY = \"goals\"\nconst GOAL_PROGRESS_STORAGE_KEY = \"goal_progress\"\n\n// Get all goals\nexport const getAllGoals = async (): Promise<Goal[]> => {\n  try {\n    const goalsJson = await AsyncStorage.getItem(GOALS_STORAGE_KEY)\n    return goalsJson ? JSON.parse(goalsJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving goals:\", error)\n    return []\n  }\n}\n\n// Get goals by status\nexport const getGoalsByStatus = async (status: GoalStatus): Promise<Goal[]> => {\n  const goals = await getAllGoals()\n  return goals.filter((goal) => goal.status === status)\n}\n\n// Get goals by type\nexport const getGoalsByType = async (type: GoalType): Promise<Goal[]> => {\n  const goals = await getAllGoals()\n  return goals.filter((goal) => goal.type === type)\n}\n\n// Get goal by ID\nexport const getGoalById = async (id: string): Promise<Goal | null> => {\n  const goals = await getAllGoals()\n  return goals.find((goal) => goal.id === id) || null\n}\n\n// Save a goal\nexport const saveGoal = async (goal: Goal): Promise<Goal> => {\n  try {\n    const goals = await getAllGoals()\n\n    // If goal has no ID, create a new one\n    if (!goal.id) {\n      goal.id = uuidv4()\n    }\n\n    // Find if goal already exists to update or add new\n    const existingIndex = goals.findIndex((g) => g.id === goal.id)\n\n    if (existingIndex >= 0) {\n      goals[existingIndex] = goal\n    } else {\n      goals.push(goal)\n    }\n\n    await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals))\n    return goal\n  } catch (error) {\n    console.error(\"Error saving goal:\", error)\n    throw error\n  }\n}\n\n// Delete a goal\nexport const deleteGoal = async (id: string): Promise<boolean> => {\n  try {\n    const goals = await getAllGoals()\n    const filteredGoals = goals.filter((goal) => goal.id !== id)\n    await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(filteredGoals))\n\n    // Also delete goal progress\n    await deleteGoalProgress(id)\n\n    return true\n  } catch (error) {\n    console.error(\"Error deleting goal:\", error)\n    return false\n  }\n}\n\n// Update goal status\nexport const updateGoalStatus = async (id: string, status: GoalStatus): Promise<boolean> => {\n  try {\n    const goals = await getAllGoals()\n    const goalIndex = goals.findIndex((g) => g.id === id)\n\n    if (goalIndex >= 0) {\n      goals[goalIndex].status = status\n      goals[goalIndex].lastUpdated = new Date()\n      await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals))\n      return true\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error updating goal status:\", error)\n    return false\n  }\n}\n\n// Update goal progress\nexport const updateGoalProgress = async (id: string, value: number): Promise<boolean> => {\n  try {\n    const goals = await getAllGoals()\n    const goalIndex = goals.findIndex((g) => g.id === id)\n\n    if (goalIndex >= 0) {\n      const goal = goals[goalIndex]\n      goal.currentValue = value\n      goal.lastUpdated = new Date()\n\n      // Check if goal is completed\n      if (goal.type === \"body_measurement\" && goal.measurementType === \"weight\") {\n        // For weight goals, we want to decrease\n        if (value <= goal.targetValue) {\n          goal.status = \"completed\"\n        }\n      } else {\n        // For other goals, we want to increase\n        if (value >= goal.targetValue) {\n          goal.status = \"completed\"\n        }\n      }\n\n      await AsyncStorage.setItem(GOALS_STORAGE_KEY, JSON.stringify(goals))\n\n      // Add progress point\n      await addGoalProgressPoint(id, value)\n\n      return true\n    }\n\n    return false\n  } catch (error) {\n    console.error(\"Error updating goal progress:\", error)\n    return false\n  }\n}\n\n// Get goal progress\nexport const getGoalProgress = async (goalId: string): Promise<GoalProgress[]> => {\n  try {\n    const progressJson = await AsyncStorage.getItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`)\n    return progressJson ? JSON.parse(progressJson) : []\n  } catch (error) {\n    console.error(\"Error retrieving goal progress:\", error)\n    return []\n  }\n}\n\n// Add goal progress point\nexport const addGoalProgressPoint = async (goalId: string, value: number): Promise<boolean> => {\n  try {\n    const progress = await getGoalProgress(goalId)\n\n    const newPoint: GoalProgress = {\n      date: new Date(),\n      value,\n    }\n\n    progress.push(newPoint)\n    await AsyncStorage.setItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`, JSON.stringify(progress))\n\n    return true\n  } catch (error) {\n    console.error(\"Error adding goal progress point:\", error)\n    return false\n  }\n}\n\n// Delete goal progress\nexport const deleteGoalProgress = async (goalId: string): Promise<boolean> => {\n  try {\n    await AsyncStorage.removeItem(`${GOAL_PROGRESS_STORAGE_KEY}_${goalId}`)\n    return true\n  } catch (error) {\n    console.error(\"Error deleting goal progress:\", error)\n    return false\n  }\n}\n\n// Check and update workout frequency goals\nexport const updateWorkoutFrequencyGoals = async (): Promise<void> => {\n  try {\n    const goals = await getGoalsByType(\"workout_frequency\")\n    const activeGoals = goals.filter((goal) => goal.status === \"active\")\n\n    if (activeGoals.length === 0) return\n\n    // Get workouts from the past week\n    const now = new Date()\n    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\n\n    // This would be replaced with actual workout service call\n    const workouts = await AsyncStorage.getItem(\"workouts\")\n    const parsedWorkouts = workouts ? JSON.parse(workouts) : []\n\n    const recentWorkouts = parsedWorkouts.filter((workout: any) => {\n      const workoutDate = new Date(workout.date)\n      return workoutDate >= oneWeekAgo && workoutDate <= now && workout.isCompleted\n    })\n\n    const workoutCount = recentWorkouts.length\n\n    // Update each active workout frequency goal\n    for (const goal of activeGoals) {\n      await updateGoalProgress(goal.id, workoutCount)\n    }\n  } catch (error) {\n    console.error(\"Error updating workout frequency goals:\", error)\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}